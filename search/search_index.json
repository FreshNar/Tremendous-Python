{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Python client library for the Tremendous API \u00b6 A simple and lightweight client library for the Tremendous API. The tremendous-client provides convenient access to resources like orders, rewards, products, campaigns, funding sources, invoices, and more. What is Tremendous? \u00b6 With Tremendous you can offer prepaid cards, money transfers, charitable donations, or let your customers choose from 2,100+ gift cards. Deliver instantly via SMS, email, and bulk link export. Learn more about Tremendous Requirements \u00b6 Python 3.8+ A Tremendous account and API Key. Get started with the Sandbox here . Installation \u00b6 Install using pip pip install tremendous-client ...or clone directly from Github git clone https://github.com/FreshNar/Tremendous-Python Never Hardcode Keys \u00b6 Yeah, you\u2019ll see API Key snippets sprinkled around these docs \u2014 they\u2019re just placeholders, don\u2019t actually use them. Treat your real keys like secrets (because they are). Hardcoding them into your codebase? Big no. Push them to GitHub? Game over. If you want to do it the right way, stash your keys in environment variables or a secrets manager. Consider using python-dotenv to store your API keys as enviornment variables.","title":"Introduction"},{"location":"#a-python-client-library-for-the-tremendous-api","text":"A simple and lightweight client library for the Tremendous API. The tremendous-client provides convenient access to resources like orders, rewards, products, campaigns, funding sources, invoices, and more.","title":"A Python client library for the Tremendous API"},{"location":"#what-is-tremendous","text":"With Tremendous you can offer prepaid cards, money transfers, charitable donations, or let your customers choose from 2,100+ gift cards. Deliver instantly via SMS, email, and bulk link export. Learn more about Tremendous","title":"What is Tremendous?"},{"location":"#requirements","text":"Python 3.8+ A Tremendous account and API Key. Get started with the Sandbox here .","title":"Requirements"},{"location":"#installation","text":"Install using pip pip install tremendous-client ...or clone directly from Github git clone https://github.com/FreshNar/Tremendous-Python","title":"Installation"},{"location":"#never-hardcode-keys","text":"Yeah, you\u2019ll see API Key snippets sprinkled around these docs \u2014 they\u2019re just placeholders, don\u2019t actually use them. Treat your real keys like secrets (because they are). Hardcoding them into your codebase? Big no. Push them to GitHub? Game over. If you want to do it the right way, stash your keys in environment variables or a secrets manager. Consider using python-dotenv to store your API keys as enviornment variables.","title":"Never Hardcode Keys"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"data_formats/","text":"From Tremendous API Docs : https://developers.tremendous.com/docs/data-formats The Tremendous API uses JSON. Response bodies are formatted as JSON documents. POST requests made to the Tremendous API are expected to be formatted as JSON as well. Data types \u00b6 You will see the following data and container types: integers strings dates As strings Formatted like this: \"2021-07-21T17:32:28Z\" In UTC see RFC 3339, section 5.6 floating point numbers hashes arrays","title":"Data Formats"},{"location":"data_formats/#data-types","text":"You will see the following data and container types: integers strings dates As strings Formatted like this: \"2021-07-21T17:32:28Z\" In UTC see RFC 3339, section 5.6 floating point numbers hashes arrays","title":"Data types"},{"location":"license/","text":"MIT License Copyright (c) 2025 Kyle Kopelke Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"objects/","text":"tremendous.RewardModel \u00b6 Bases: BaseModel Represents a tremendous reward. A reward is a monetary incentive sent to an individual recipient. Attributes: Name Type Description id str Tremendous ID of the reward. order_id str Tremendous ID of the order this reward is part of. created_at string Date the reward was created. campaign_id string Tremendous ID of the campaign this reward is part of. products list List of products in the reward. value float Value of the reward. Source code in tremendous/rewards/reward.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class RewardModel ( BaseModel ): \"\"\" Represents a tremendous reward. A reward is a monetary incentive sent to an individual recipient. Attributes: id (str): Tremendous ID of the reward. order_id (str): Tremendous ID of the order this reward is part of. created_at (string): Date the reward was created. campaign_id (string): Tremendous ID of the campaign this reward is part of. products (list): List of products in the reward. value (float): Value of the reward. \"\"\" id : str order_id : str created_at : str value : ValueModel delivery : DeliveryModel recipient : RecipientModel campaign_id : str = \"\" products : List [ ProductModel ] = [] tremendous.OrderModel \u00b6 Bases: BaseModel Source code in tremendous/orders/order.py 18 19 20 21 22 23 24 25 26 27 class OrderModel ( BaseModel ): id : Optional [ str ] = None external_id : Optional [ str ] = None campaign_id : Optional [ str ] = None created_at : Optional [ str ] = None status : Optional [ str ] = None channel : Optional [ str ] = None payment : Optional [ PaymentModel ] = None invoice_id : Optional [ str ] = None rewards : Optional [ List [ RewardModel ]] = None tremendous.ProductModel \u00b6 Bases: BaseModel Represents a Tremendous product. A product represents a payout mechanism for a reward, such as gift cards, prepaid cards, or other incentives available through the Tremendous platform. Attributes: Name Type Description id str Unique identifier for the product. name str Display name of the product. description str Detailed description of the product. category str Main category the product belongs to. subcategory str Optional subcategory for more specific classification. disclosure str Terms and conditions or disclosure information. skus List [ Dict ] Available SKUs/variants for this product. currency_codes List [ str ] Supported currency codes (e.g., ['USD', 'EUR']). countries List [ Dict ] Countries where this product is available. images List [ Dict ] Product images and assets. usage_instructions str Instructions on how to use/redeem the product. documents Dict Additional documentation or terms. Source code in tremendous/products/product.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class ProductModel ( BaseModel ): \"\"\" Represents a Tremendous product. A product represents a payout mechanism for a reward, such as gift cards, prepaid cards, or other incentives available through the Tremendous platform. Attributes: id (str): Unique identifier for the product. name (str): Display name of the product. description (str): Detailed description of the product. category (str): Main category the product belongs to. subcategory (str): Optional subcategory for more specific classification. disclosure (str): Terms and conditions or disclosure information. skus (List[Dict]): Available SKUs/variants for this product. currency_codes (List[str]): Supported currency codes (e.g., ['USD', 'EUR']). countries (List[Dict]): Countries where this product is available. images (List[Dict]): Product images and assets. usage_instructions (str): Instructions on how to use/redeem the product. documents (Dict): Additional documentation or terms. \"\"\" id : str name : str description : str category : str subcategory : str = \"\" disclosure : str = \"\" skus : List [ SkuModel ] currency_codes : List [ str ] countries : List [ CountryModel ] images : List [ ImageModel ] usage_instructions : str = \"\" documents : DocumentModel = None tremendous.CampaignModel \u00b6 Bases: BaseModel Source code in tremendous/campaigns/campaigns.py 23 24 25 26 27 28 29 class CampaignModel ( BaseModel ): id : str name : Optional [ str ] = None description : Optional [ str ] = None products : Optional [ List [ str ]] = None webpage_style : Optional [ WebpageStyleModel ] = None email_style : Optional [ EmailStyleModel ] = None tremendous.FundingSourceModel \u00b6 Bases: BaseModel Source code in tremendous/funding_sources/funding_source.py 7 8 9 10 11 12 13 class FundingSourceModel ( BaseModel ): id : str method : Optional [ str ] = None usage_permissions : List [ str ] status : Optional [ str ] = None type : Optional [ str ] = None meta : Optional [ Dict ] = None tremendous.InvoiceModel \u00b6 Bases: BaseModel Source code in tremendous/invoices/invoices.py 9 10 11 12 13 14 15 16 17 18 class InvoiceModel ( BaseModel ): id : str po_number : Optional [ str ] = None amount : Optional [ float ] = None international : Optional [ bool ] = None status : Optional [ str ] = None orders : Optional [ List [ OrderModel ]] = None rewards : Optional [ List [ RewardModel ]] = None created_at : Optional [ str ] = None paid_at : Optional [ str ] = None tremendous.TopupModel \u00b6 Bases: BaseModel Source code in tremendous/topups/topup.py 7 8 9 10 11 12 13 14 15 16 17 18 class TopupModel ( BaseModel ): id : str amount : Optional [ float ] = None processing_fee : Optional [ float ] = None funding_source_id : Optional [ str ] = None status : Optional [ str ] = None created_at : Optional [ str ] = None fully_credited_at : Optional [ str ] = None rejected_at : Optional [ str ] = None reversed_at : Optional [ str ] = None reversed_reason : Optional [ str ] = None idempotency_key : Optional [ str ] = None tremendous.BalanceTransactionModel \u00b6 Bases: BaseModel Source code in tremendous/balance_transactions/balance_transaction.py 8 9 10 11 12 13 14 class BalanceTransactionModel ( BaseModel ): created_at : Optional [ str ] = None amount : Optional [ float ] = None balance : Optional [ float ] = None action : Optional [ str ] = None description : Optional [ str ] = None order : Optional [ OrderModel ] = None tremendous.OrganizationModel \u00b6 Bases: BaseModel Source code in tremendous/organizations/organization.py 7 8 9 10 11 12 class OrganizationModel ( BaseModel ): id : str name : Optional [ str ] = None website : Optional [ str ] = None status : Optional [ str ] = None created_at : Optional [ str ] = None tremendous.MemberModel \u00b6 Bases: BaseModel Source code in tremendous/members/member.py 7 8 9 10 11 12 13 14 15 class MemberModel ( BaseModel ): id : str email : Optional [ str ] = None name : Optional [ str ] = None active : Optional [ bool ] = None role : Optional [ str ] = None status : Optional [ str ] = None created_at : Optional [ str ] = None last_login_at : Optional [ str ] = None tremendous.RoleModel \u00b6 Bases: BaseModel Source code in tremendous/roles/role.py 7 8 9 10 class RoleModel ( BaseModel ): id : str title : Optional [ str ] = None description : Optional [ str ] = None tremendous.FieldModel \u00b6 Bases: BaseModel Source code in tremendous/fields/field.py 7 8 9 10 11 12 13 class FieldModel ( BaseModel ): id : str label : Optional [ str ] = None data_type : Optional [ str ] = None data : Optional [ Dict ] = None required : Optional [ bool ] = None scope : Optional [ str ] = None tremendous.WebhookModel \u00b6 Bases: BaseModel Source code in tremendous/webhooks/webhook.py 11 12 13 14 class WebhookModel ( BaseModel ): id : str url : Optional [ str ] = None private_key : Optional [ str ] = None tremendous.ForexModel \u00b6 Bases: BaseModel Source code in tremendous/forex/forex.py 7 8 class ForexModel ( BaseModel ): forex : Dict","title":"Objects"},{"location":"objects/#tremendous.RewardModel","text":"Bases: BaseModel Represents a tremendous reward. A reward is a monetary incentive sent to an individual recipient. Attributes: Name Type Description id str Tremendous ID of the reward. order_id str Tremendous ID of the order this reward is part of. created_at string Date the reward was created. campaign_id string Tremendous ID of the campaign this reward is part of. products list List of products in the reward. value float Value of the reward. Source code in tremendous/rewards/reward.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class RewardModel ( BaseModel ): \"\"\" Represents a tremendous reward. A reward is a monetary incentive sent to an individual recipient. Attributes: id (str): Tremendous ID of the reward. order_id (str): Tremendous ID of the order this reward is part of. created_at (string): Date the reward was created. campaign_id (string): Tremendous ID of the campaign this reward is part of. products (list): List of products in the reward. value (float): Value of the reward. \"\"\" id : str order_id : str created_at : str value : ValueModel delivery : DeliveryModel recipient : RecipientModel campaign_id : str = \"\" products : List [ ProductModel ] = []","title":"RewardModel"},{"location":"objects/#tremendous.OrderModel","text":"Bases: BaseModel Source code in tremendous/orders/order.py 18 19 20 21 22 23 24 25 26 27 class OrderModel ( BaseModel ): id : Optional [ str ] = None external_id : Optional [ str ] = None campaign_id : Optional [ str ] = None created_at : Optional [ str ] = None status : Optional [ str ] = None channel : Optional [ str ] = None payment : Optional [ PaymentModel ] = None invoice_id : Optional [ str ] = None rewards : Optional [ List [ RewardModel ]] = None","title":"OrderModel"},{"location":"objects/#tremendous.ProductModel","text":"Bases: BaseModel Represents a Tremendous product. A product represents a payout mechanism for a reward, such as gift cards, prepaid cards, or other incentives available through the Tremendous platform. Attributes: Name Type Description id str Unique identifier for the product. name str Display name of the product. description str Detailed description of the product. category str Main category the product belongs to. subcategory str Optional subcategory for more specific classification. disclosure str Terms and conditions or disclosure information. skus List [ Dict ] Available SKUs/variants for this product. currency_codes List [ str ] Supported currency codes (e.g., ['USD', 'EUR']). countries List [ Dict ] Countries where this product is available. images List [ Dict ] Product images and assets. usage_instructions str Instructions on how to use/redeem the product. documents Dict Additional documentation or terms. Source code in tremendous/products/product.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class ProductModel ( BaseModel ): \"\"\" Represents a Tremendous product. A product represents a payout mechanism for a reward, such as gift cards, prepaid cards, or other incentives available through the Tremendous platform. Attributes: id (str): Unique identifier for the product. name (str): Display name of the product. description (str): Detailed description of the product. category (str): Main category the product belongs to. subcategory (str): Optional subcategory for more specific classification. disclosure (str): Terms and conditions or disclosure information. skus (List[Dict]): Available SKUs/variants for this product. currency_codes (List[str]): Supported currency codes (e.g., ['USD', 'EUR']). countries (List[Dict]): Countries where this product is available. images (List[Dict]): Product images and assets. usage_instructions (str): Instructions on how to use/redeem the product. documents (Dict): Additional documentation or terms. \"\"\" id : str name : str description : str category : str subcategory : str = \"\" disclosure : str = \"\" skus : List [ SkuModel ] currency_codes : List [ str ] countries : List [ CountryModel ] images : List [ ImageModel ] usage_instructions : str = \"\" documents : DocumentModel = None","title":"ProductModel"},{"location":"objects/#tremendous.CampaignModel","text":"Bases: BaseModel Source code in tremendous/campaigns/campaigns.py 23 24 25 26 27 28 29 class CampaignModel ( BaseModel ): id : str name : Optional [ str ] = None description : Optional [ str ] = None products : Optional [ List [ str ]] = None webpage_style : Optional [ WebpageStyleModel ] = None email_style : Optional [ EmailStyleModel ] = None","title":"CampaignModel"},{"location":"objects/#tremendous.FundingSourceModel","text":"Bases: BaseModel Source code in tremendous/funding_sources/funding_source.py 7 8 9 10 11 12 13 class FundingSourceModel ( BaseModel ): id : str method : Optional [ str ] = None usage_permissions : List [ str ] status : Optional [ str ] = None type : Optional [ str ] = None meta : Optional [ Dict ] = None","title":"FundingSourceModel"},{"location":"objects/#tremendous.InvoiceModel","text":"Bases: BaseModel Source code in tremendous/invoices/invoices.py 9 10 11 12 13 14 15 16 17 18 class InvoiceModel ( BaseModel ): id : str po_number : Optional [ str ] = None amount : Optional [ float ] = None international : Optional [ bool ] = None status : Optional [ str ] = None orders : Optional [ List [ OrderModel ]] = None rewards : Optional [ List [ RewardModel ]] = None created_at : Optional [ str ] = None paid_at : Optional [ str ] = None","title":"InvoiceModel"},{"location":"objects/#tremendous.TopupModel","text":"Bases: BaseModel Source code in tremendous/topups/topup.py 7 8 9 10 11 12 13 14 15 16 17 18 class TopupModel ( BaseModel ): id : str amount : Optional [ float ] = None processing_fee : Optional [ float ] = None funding_source_id : Optional [ str ] = None status : Optional [ str ] = None created_at : Optional [ str ] = None fully_credited_at : Optional [ str ] = None rejected_at : Optional [ str ] = None reversed_at : Optional [ str ] = None reversed_reason : Optional [ str ] = None idempotency_key : Optional [ str ] = None","title":"TopupModel"},{"location":"objects/#tremendous.BalanceTransactionModel","text":"Bases: BaseModel Source code in tremendous/balance_transactions/balance_transaction.py 8 9 10 11 12 13 14 class BalanceTransactionModel ( BaseModel ): created_at : Optional [ str ] = None amount : Optional [ float ] = None balance : Optional [ float ] = None action : Optional [ str ] = None description : Optional [ str ] = None order : Optional [ OrderModel ] = None","title":"BalanceTransactionModel"},{"location":"objects/#tremendous.OrganizationModel","text":"Bases: BaseModel Source code in tremendous/organizations/organization.py 7 8 9 10 11 12 class OrganizationModel ( BaseModel ): id : str name : Optional [ str ] = None website : Optional [ str ] = None status : Optional [ str ] = None created_at : Optional [ str ] = None","title":"OrganizationModel"},{"location":"objects/#tremendous.MemberModel","text":"Bases: BaseModel Source code in tremendous/members/member.py 7 8 9 10 11 12 13 14 15 class MemberModel ( BaseModel ): id : str email : Optional [ str ] = None name : Optional [ str ] = None active : Optional [ bool ] = None role : Optional [ str ] = None status : Optional [ str ] = None created_at : Optional [ str ] = None last_login_at : Optional [ str ] = None","title":"MemberModel"},{"location":"objects/#tremendous.RoleModel","text":"Bases: BaseModel Source code in tremendous/roles/role.py 7 8 9 10 class RoleModel ( BaseModel ): id : str title : Optional [ str ] = None description : Optional [ str ] = None","title":"RoleModel"},{"location":"objects/#tremendous.FieldModel","text":"Bases: BaseModel Source code in tremendous/fields/field.py 7 8 9 10 11 12 13 class FieldModel ( BaseModel ): id : str label : Optional [ str ] = None data_type : Optional [ str ] = None data : Optional [ Dict ] = None required : Optional [ bool ] = None scope : Optional [ str ] = None","title":"FieldModel"},{"location":"objects/#tremendous.WebhookModel","text":"Bases: BaseModel Source code in tremendous/webhooks/webhook.py 11 12 13 14 class WebhookModel ( BaseModel ): id : str url : Optional [ str ] = None private_key : Optional [ str ] = None","title":"WebhookModel"},{"location":"objects/#tremendous.ForexModel","text":"Bases: BaseModel Source code in tremendous/forex/forex.py 7 8 class ForexModel ( BaseModel ): forex : Dict","title":"ForexModel"},{"location":"quick_start/","text":"Quickstart \u00b6 After you have your Tremendous API Key, initialize the client. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"<your-api-key>\" , sandbox = True ) With your client initalized, you can start handling business. To introduce how the client interacts with the API, let's go through an example. Example Usage: Survey Participants get a Starbucks Gift Card \u00b6 Let's say we want to programmatically reward our survey participants with a gift card to Starbucks. We have a few steps we need to take to make this happen. We'll need to find the Id of the Starbucks gift card in the Tremendous Catalog . Create an email Campaign template. Finally, email the participant their gift card! 1. Get the Starbucks Gift Card Id \u00b6 To start, it might be useful to get information about our Starbucks Gift Card. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"TestTEST_aB....\" , sandbox = True ) starbucks_gift_card = tremendous . Products . get ( id = \"2XG0FLQXBDCZ\" ) # Pretty print the gift card data print ( starbucks_gift_card . model_dump_json ( indent = 4 )) Tip! You can find the latest Tremendous Gift Card Catalog (including Id's) here: Download CSV By default, our client returns Objects, but we can turn that into JSON for better readability using the handy \"model_dump_json\" method. { \"id\" : \"2XG0FLQXBDCZ\" , \"name\" : \"Starbucks US\" , \"description\" : \"\" , \"category\" : \"merchant_card\" , \"subcategory\" : \"food_and_drink\" , \"disclosure\" : \"There are a small number of stores which are not wholly company owned and are not able to accept Starbucks Cards. These include concessions located within leisure facilities such as Centre Parcs, Village Hotels, Bourne Leisure and a number of our university stores. Please refer to our store locator (using the \u2018Accept Starbucks Cards\u2019 filter) for further information. Full terms can be found here: [www.starbucks.com/rewards/terms](https://www.starbucks.com/rewards/terms)\" , \"skus\" : [ { \"min\" : 5.0 , \"max\" : 500.0 } ], \"currency_codes\" : [ \"USD\" ], \"countries\" : [ { \"abbr\" : \"PR\" }, { \"abbr\" : \"US\" } ], \"images\" : [ { \"src\" : \"https://testflight.tremendous.com/product_images/2XG0FLQXBDCZ/card\" , \"type\" : \"card\" , \"content_type\" : \"image/png\" }, { \"src\" : \"https://testflight.tremendous.com/product_images/2XG0FLQXBDCZ/logo\" , \"type\" : \"logo\" , \"content_type\" : \"image/png\" } ], \"usage_instructions\" : \"**Starbucks eGift Redemption Instructions:**\\r\\n\\r\\n* Add to your Starbucks Rewards account [online](http://www.starbucks.com/rewards)\\r\\n* Or open the eGift on your device, and print or scan the barcode on your phone to pay at participating Starbucks stores\\r\\n* Join Starbucks Rewards via the Starbucks app on your mobile device and add your eGift via the instructions\\r\\n* Visit the [Starbucks Store Locator](http://www.starbucks.com/store-locator?map=39.635307,-101.337891,5z) to find the nearest store \\r\\n* For our full Terms & Conditions,[ click here](http://www.starbucks.com/terms/manage-Terms & Conditions,[ click here](http://www.starbucks.com/terms/manage-gift-cards/) \" , \"documents\" : null } There's alot of information about our gift card here. What we'll note is that our minimum gift card amount is $5 USD \u2014 seen in \"skus\". 2. Create an Email Template for our participants \u00b6 Now that we have information about our gift card. Let's design and write some copy for our email Campaign. This is particularly useful, becuase we don't need to create a new email template everytime we want to send a gift card for this Campaign. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"TestTEST_aB....\" , sandbox = True ) campaign = tremendous . Campaigns . create ( name = \"Thank survey participants\" , description = \"A starbucks gift card as a thank you to survery participants\" , products = [ starbucks_gift_card . id ], webpage_style = { \"headline\" : \"Thank you for your participation\" , \"message\" : \"We're rewarding you with a Starbucks Gift Card!\" , \"logo_background_color\" : \"#121212\" , \"background_color\" : \"#121212\" }, email_style = { \"sender_name\" : \"John Marketer\" , \"subject_line\" : \"Thank you for being a participant!\" , \"logo_background_color\" : \"#121212\" , \"button_color\" : \"#121212\" } ) The create method will return the Campaign Object. We'll need the \"id\" of the Campaign if we want to reuse it in the future. campaign . id 3. Create an Order and send our gift card via email \u00b6 from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"TestTEST_aB....\" , sandbox = True ) order = tremendous . Orders . create ( payment_funding_source_id = \"balance\" , campaign_id = campaign . id , value = { \"denomination\" : 5 , \"currency_code\" : \"USD\" }, recipient = { \"name\" : \"Jake Smith\" , \"email\" : \"jsmith@example.com\" }, language = \"en\" , delivery_method = { \"method\" : \"email\" }, ) Great! Now Jake Smith received his gift card and we didn't have to take a trip to Starbucks to make it happen.","title":"Getting Started"},{"location":"quick_start/#quickstart","text":"After you have your Tremendous API Key, initialize the client. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"<your-api-key>\" , sandbox = True ) With your client initalized, you can start handling business. To introduce how the client interacts with the API, let's go through an example.","title":"Quickstart"},{"location":"quick_start/#example-usage-survey-participants-get-a-starbucks-gift-card","text":"Let's say we want to programmatically reward our survey participants with a gift card to Starbucks. We have a few steps we need to take to make this happen. We'll need to find the Id of the Starbucks gift card in the Tremendous Catalog . Create an email Campaign template. Finally, email the participant their gift card!","title":"Example Usage: Survey Participants get a Starbucks Gift Card"},{"location":"quick_start/#1-get-the-starbucks-gift-card-id","text":"To start, it might be useful to get information about our Starbucks Gift Card. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"TestTEST_aB....\" , sandbox = True ) starbucks_gift_card = tremendous . Products . get ( id = \"2XG0FLQXBDCZ\" ) # Pretty print the gift card data print ( starbucks_gift_card . model_dump_json ( indent = 4 )) Tip! You can find the latest Tremendous Gift Card Catalog (including Id's) here: Download CSV By default, our client returns Objects, but we can turn that into JSON for better readability using the handy \"model_dump_json\" method. { \"id\" : \"2XG0FLQXBDCZ\" , \"name\" : \"Starbucks US\" , \"description\" : \"\" , \"category\" : \"merchant_card\" , \"subcategory\" : \"food_and_drink\" , \"disclosure\" : \"There are a small number of stores which are not wholly company owned and are not able to accept Starbucks Cards. These include concessions located within leisure facilities such as Centre Parcs, Village Hotels, Bourne Leisure and a number of our university stores. Please refer to our store locator (using the \u2018Accept Starbucks Cards\u2019 filter) for further information. Full terms can be found here: [www.starbucks.com/rewards/terms](https://www.starbucks.com/rewards/terms)\" , \"skus\" : [ { \"min\" : 5.0 , \"max\" : 500.0 } ], \"currency_codes\" : [ \"USD\" ], \"countries\" : [ { \"abbr\" : \"PR\" }, { \"abbr\" : \"US\" } ], \"images\" : [ { \"src\" : \"https://testflight.tremendous.com/product_images/2XG0FLQXBDCZ/card\" , \"type\" : \"card\" , \"content_type\" : \"image/png\" }, { \"src\" : \"https://testflight.tremendous.com/product_images/2XG0FLQXBDCZ/logo\" , \"type\" : \"logo\" , \"content_type\" : \"image/png\" } ], \"usage_instructions\" : \"**Starbucks eGift Redemption Instructions:**\\r\\n\\r\\n* Add to your Starbucks Rewards account [online](http://www.starbucks.com/rewards)\\r\\n* Or open the eGift on your device, and print or scan the barcode on your phone to pay at participating Starbucks stores\\r\\n* Join Starbucks Rewards via the Starbucks app on your mobile device and add your eGift via the instructions\\r\\n* Visit the [Starbucks Store Locator](http://www.starbucks.com/store-locator?map=39.635307,-101.337891,5z) to find the nearest store \\r\\n* For our full Terms & Conditions,[ click here](http://www.starbucks.com/terms/manage-Terms & Conditions,[ click here](http://www.starbucks.com/terms/manage-gift-cards/) \" , \"documents\" : null } There's alot of information about our gift card here. What we'll note is that our minimum gift card amount is $5 USD \u2014 seen in \"skus\".","title":"1. Get the Starbucks Gift Card Id"},{"location":"quick_start/#2-create-an-email-template-for-our-participants","text":"Now that we have information about our gift card. Let's design and write some copy for our email Campaign. This is particularly useful, becuase we don't need to create a new email template everytime we want to send a gift card for this Campaign. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"TestTEST_aB....\" , sandbox = True ) campaign = tremendous . Campaigns . create ( name = \"Thank survey participants\" , description = \"A starbucks gift card as a thank you to survery participants\" , products = [ starbucks_gift_card . id ], webpage_style = { \"headline\" : \"Thank you for your participation\" , \"message\" : \"We're rewarding you with a Starbucks Gift Card!\" , \"logo_background_color\" : \"#121212\" , \"background_color\" : \"#121212\" }, email_style = { \"sender_name\" : \"John Marketer\" , \"subject_line\" : \"Thank you for being a participant!\" , \"logo_background_color\" : \"#121212\" , \"button_color\" : \"#121212\" } ) The create method will return the Campaign Object. We'll need the \"id\" of the Campaign if we want to reuse it in the future. campaign . id","title":"2. Create an Email Template for our participants"},{"location":"quick_start/#3-create-an-order-and-send-our-gift-card-via-email","text":"from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"TestTEST_aB....\" , sandbox = True ) order = tremendous . Orders . create ( payment_funding_source_id = \"balance\" , campaign_id = campaign . id , value = { \"denomination\" : 5 , \"currency_code\" : \"USD\" }, recipient = { \"name\" : \"Jake Smith\" , \"email\" : \"jsmith@example.com\" }, language = \"en\" , delivery_method = { \"method\" : \"email\" }, ) Great! Now Jake Smith received his gift card and we didn't have to take a trip to Starbucks to make it happen.","title":"3. Create an Order and send our gift card via email"},{"location":"reference/","text":"Initialization \u00b6 Before we can make any requests, we need to initialize the client. Every request follows the same schema. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"<your-api-key>\" , sandbox = True ) tremendous .< resource >.< method ( paramters ) > Working Example \u00b6 from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"<your-api-key>\" , sandbox = True ) tremendous . Rewards . list ( offset = 0 , limit = 10 ) For production enviornments, set Sandbox to False and replace your API Key with the production API Key. tremendous.Rewards \u00b6 A reward is a monetary incentive sent to an individual recipient. Rewards have an amount, a delivery method, and a set of redemption choices available to the recipient. Tremendous Rewards API Reference Source code in tremendous/rewards/reward.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class Rewards : \"\"\" A reward is a monetary incentive sent to an individual recipient. Rewards have an amount, a delivery method, and a set of redemption choices available to the recipient. [Tremendous Rewards API Reference](https://developers.tremendous.com/reference/rewards) \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def get ( self , id : str ) -> RewardModel : \"\"\" Retrieve a reward by its ID. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.get(\"1234567890\") ``` \"\"\" return self . client . _fetch ( path = f \"/rewards/ { id } \" , model_cls = RewardModel , list_key = \"reward\" ) def list ( self , offset : int = 0 , limit : int = 100 ) -> List [ RewardModel ]: \"\"\" Retrieve a list of rewards. Args: offset (int, optional): Offsets and orders by their creation date. limit (int, optional): Limits the number of rewards returned. Returns: RewardModel: The list of rewards. ```python tremendous.Rewards.list() ``` \"\"\" return self . client . _fetch_list ( path = \"/rewards\" , model_cls = RewardModel , list_key = \"rewards\" , params = { \"offset\" : offset , \"limit\" : limit } ) def generate_reward_url ( self , id : str ) -> str : \"\"\" Generate a redemption link for the reward identified by the id. Args: id (str): The ID of the reward. Returns: URL: The redemption link. ```python tremendous.Rewards.generate_reward_url(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /generate_link\" , params = { \"id\" : id } ) def resend_reward ( self , id : str , updated_email : str = None , updated_phone : str = None ) -> RewardModel : \"\"\" Resends a reward, identified by the given id, to its recipient. Only rewards with a previous delivery failure can be resent. Args: id (str): The ID of the reward. updated_email (str, optional): The email address to send the reward to. updated_phone (str, optional): The phone number to send the reward to. Returns: RewardModel: The reward. ```python tremendous.Rewards.resend_reward(\"1234567890\", updated_email=\"test@test.com\", updated_phone=\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /resend\" , params = { \"id\" : id , \"updated_email\" : updated_email , \"updated_phone\" : updated_phone } ) def cancel_reward ( self , id : str ) -> RewardModel : \"\"\" Cancels a reward, identified by the given id. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.cancel_reward(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /cancel\" , params = { \"id\" : id } ) cancel_reward ( id ) \u00b6 Cancels a reward, identified by the given id. Parameters: Name Type Description Default id str The ID of the reward. required Returns: Name Type Description RewardModel RewardModel The reward. tremendous . Rewards . cancel_reward ( \"1234567890\" ) Source code in tremendous/rewards/reward.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 def cancel_reward ( self , id : str ) -> RewardModel : \"\"\" Cancels a reward, identified by the given id. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.cancel_reward(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /cancel\" , params = { \"id\" : id } ) generate_reward_url ( id ) \u00b6 Generate a redemption link for the reward identified by the id. Parameters: Name Type Description Default id str The ID of the reward. required Returns: Name Type Description URL str The redemption link. tremendous . Rewards . generate_reward_url ( \"1234567890\" ) Source code in tremendous/rewards/reward.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def generate_reward_url ( self , id : str ) -> str : \"\"\" Generate a redemption link for the reward identified by the id. Args: id (str): The ID of the reward. Returns: URL: The redemption link. ```python tremendous.Rewards.generate_reward_url(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /generate_link\" , params = { \"id\" : id } ) get ( id ) \u00b6 Retrieve a reward by its ID. Parameters: Name Type Description Default id str The ID of the reward. required Returns: Name Type Description RewardModel RewardModel The reward. tremendous . Rewards . get ( \"1234567890\" ) Source code in tremendous/rewards/reward.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def get ( self , id : str ) -> RewardModel : \"\"\" Retrieve a reward by its ID. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.get(\"1234567890\") ``` \"\"\" return self . client . _fetch ( path = f \"/rewards/ { id } \" , model_cls = RewardModel , list_key = \"reward\" ) list ( offset = 0 , limit = 100 ) \u00b6 Retrieve a list of rewards. Parameters: Name Type Description Default offset int Offsets and orders by their creation date. 0 limit int Limits the number of rewards returned. 100 Returns: Name Type Description RewardModel List [ RewardModel ] The list of rewards. tremendous . Rewards . list () Source code in tremendous/rewards/reward.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def list ( self , offset : int = 0 , limit : int = 100 ) -> List [ RewardModel ]: \"\"\" Retrieve a list of rewards. Args: offset (int, optional): Offsets and orders by their creation date. limit (int, optional): Limits the number of rewards returned. Returns: RewardModel: The list of rewards. ```python tremendous.Rewards.list() ``` \"\"\" return self . client . _fetch_list ( path = \"/rewards\" , model_cls = RewardModel , list_key = \"rewards\" , params = { \"offset\" : offset , \"limit\" : limit } ) resend_reward ( id , updated_email = None , updated_phone = None ) \u00b6 Resends a reward, identified by the given id, to its recipient. Only rewards with a previous delivery failure can be resent. Parameters: Name Type Description Default id str The ID of the reward. required updated_email str The email address to send the reward to. None updated_phone str The phone number to send the reward to. None Returns: Name Type Description RewardModel RewardModel The reward. tremendous . Rewards . resend_reward ( \"1234567890\" , updated_email = \"test@test.com\" , updated_phone = \"1234567890\" ) Source code in tremendous/rewards/reward.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def resend_reward ( self , id : str , updated_email : str = None , updated_phone : str = None ) -> RewardModel : \"\"\" Resends a reward, identified by the given id, to its recipient. Only rewards with a previous delivery failure can be resent. Args: id (str): The ID of the reward. updated_email (str, optional): The email address to send the reward to. updated_phone (str, optional): The phone number to send the reward to. Returns: RewardModel: The reward. ```python tremendous.Rewards.resend_reward(\"1234567890\", updated_email=\"test@test.com\", updated_phone=\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /resend\" , params = { \"id\" : id , \"updated_email\" : updated_email , \"updated_phone\" : updated_phone } ) tremendous.Orders \u00b6 The order object wraps the fulfillment of one or more rewards. If you want to send rewards via the API, you'll do it by creating an order. Tremendous Orders API Reference Source code in tremendous/orders/order.pyclass Orders : \"\"\" The order object wraps the fulfillment of one or more rewards. If you want to send rewards via the API, you'll do it by creating an order. [Tremendous Orders API Reference](https://developers.tremendous.com/reference/orders) \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def get ( self , order_id : str ) -> OrderModel : \"\"\" Retrieve an order by its ID. Args: order_id (str): The ID of the order. Returns: OrderModel: The order. \"\"\" return self . client . _fetch ( path = f \"/orders/ { order_id } \" , model_cls = OrderModel , list_key = \"order\" ) def list ( self , offset : int = 0 , campaign_id : str = None , external_id : str = None , created_at_gte : str = None , created_at_lte : str = None , limit : int = 10 ) -> List [ OrderModel ]: \"\"\" Retrieve a list of orders. Args: offset (int, optional): Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC). campaign_id (str, optional): Filter by campaign ID. external_id (str, optional): Filter by external ID. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. limit (int, optional): Limits the number of orders returned. \"\"\" return self . client . _fetch_list ( path = \"/orders\" , model_cls = OrderModel , list_key = \"orders\" , params = { \"offset\" : offset , \"campaign_id\" : campaign_id , \"external_id\" : external_id , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte , \"limit\" : limit } ) def create ( self , payment_funding_source_id : str , recipient : Dict , value : Dict , campaign_id : Optional [ str ] = None , products : Optional [ List [ Dict ]] = None , external_id : Optional [ str ] = None , deliver_at : str = None , custom_fields : List [ Dict [ str , str ]] = None , language : str = \"en\" , delivery_method : Dict = None , meta_data : Dict [ str , str ] = None ) -> OrderModel : \"\"\" Create an order. Args: external_id (str): The external ID of the order. payment_funding_source_id (str): The payment funding source ID of the order. products (List[Dict]): The products of the order. value (Dict): The value of the order. recipient (Dict): The recipient of the order. deliver_at (str, optional): The deliver at of the order. custom_fields (Dict[str, str], optional): The custom fields of the order. language (str, optional): The language of the order. delivery_method (Dict, optional): The delivery method of the order. \"\"\" return self . client . _create ( path = \"/orders\" , model_cls = OrderModel , params = { \"external_id\" : external_id , \"payment\" : { \"funding_source_id\" : payment_funding_source_id }, \"reward\" : { \"campaign_id\" : campaign_id , \"products\" : products , \"recipient\" : recipient , \"value\" : value , \"deliver_at\" : deliver_at , \"custom_fields\" : [ custom_fields ], \"language\" : language , \"delivery\" : delivery_method , \"meta_data\" : meta_data }, }, list_key = \"order\" ) def approve ( self , id : str ) -> OrderModel : \"\"\" Approves an order that is pending review, identified by the given id in the URL. Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable 'Allow approvals via API' via the organization's 'Order Approvals' settings from the Tremendous dashboard. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /approve\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" ) def reject ( self , id : str ) -> OrderModel : \"\"\" Rejects an order that is pending review, identified by the given id in the URL. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /reject\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" ) approve ( id ) \u00b6 Approves an order that is pending review, identified by the given id in the URL. Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable 'Allow approvals via API' via the organization's 'Order Approvals' settings from the Tremendous dashboard. Parameters: Name Type Description Default id str The ID of the order. required Source code in tremendous/orders/order.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 def approve ( self , id : str ) -> OrderModel : \"\"\" Approves an order that is pending review, identified by the given id in the URL. Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable 'Allow approvals via API' via the organization's 'Order Approvals' settings from the Tremendous dashboard. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /approve\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" ) create ( payment_funding_source_id , recipient , value , campaign_id = None , products = None , external_id = None , deliver_at = None , custom_fields = None , language = 'en' , delivery_method = None , meta_data = None ) \u00b6 Create an order. Parameters: Name Type Description Default external_id str The external ID of the order. None payment_funding_source_id str The payment funding source ID of the order. required products List [ Dict ] The products of the order. None value Dict The value of the order. required recipient Dict The recipient of the order. required deliver_at str The deliver at of the order. None custom_fields Dict [ str , str ] The custom fields of the order. None language str The language of the order. 'en' delivery_method Dict The delivery method of the order. None Source code in tremendous/orders/order.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def create ( self , payment_funding_source_id : str , recipient : Dict , value : Dict , campaign_id : Optional [ str ] = None , products : Optional [ List [ Dict ]] = None , external_id : Optional [ str ] = None , deliver_at : str = None , custom_fields : List [ Dict [ str , str ]] = None , language : str = \"en\" , delivery_method : Dict = None , meta_data : Dict [ str , str ] = None ) -> OrderModel : \"\"\" Create an order. Args: external_id (str): The external ID of the order. payment_funding_source_id (str): The payment funding source ID of the order. products (List[Dict]): The products of the order. value (Dict): The value of the order. recipient (Dict): The recipient of the order. deliver_at (str, optional): The deliver at of the order. custom_fields (Dict[str, str], optional): The custom fields of the order. language (str, optional): The language of the order. delivery_method (Dict, optional): The delivery method of the order. \"\"\" return self . client . _create ( path = \"/orders\" , model_cls = OrderModel , params = { \"external_id\" : external_id , \"payment\" : { \"funding_source_id\" : payment_funding_source_id }, \"reward\" : { \"campaign_id\" : campaign_id , \"products\" : products , \"recipient\" : recipient , \"value\" : value , \"deliver_at\" : deliver_at , \"custom_fields\" : [ custom_fields ], \"language\" : language , \"delivery\" : delivery_method , \"meta_data\" : meta_data }, }, list_key = \"order\" ) get ( order_id ) \u00b6 Retrieve an order by its ID. Parameters: Name Type Description Default order_id str The ID of the order. required Returns: Name Type Description OrderModel OrderModel The order. Source code in tremendous/orders/order.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , order_id : str ) -> OrderModel : \"\"\" Retrieve an order by its ID. Args: order_id (str): The ID of the order. Returns: OrderModel: The order. \"\"\" return self . client . _fetch ( path = f \"/orders/ { order_id } \" , model_cls = OrderModel , list_key = \"order\" ) list ( offset = 0 , campaign_id = None , external_id = None , created_at_gte = None , created_at_lte = None , limit = 10 ) \u00b6 Retrieve a list of orders. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC). 0 campaign_id str Filter by campaign ID. None external_id str Filter by external ID. None created_at_gte str Filter by created at greater than or equal to. None created_at_lte str Filter by created at less than or equal to. None limit int Limits the number of orders returned. 10 Source code in tremendous/orders/order.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def list ( self , offset : int = 0 , campaign_id : str = None , external_id : str = None , created_at_gte : str = None , created_at_lte : str = None , limit : int = 10 ) -> List [ OrderModel ]: \"\"\" Retrieve a list of orders. Args: offset (int, optional): Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC). campaign_id (str, optional): Filter by campaign ID. external_id (str, optional): Filter by external ID. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. limit (int, optional): Limits the number of orders returned. \"\"\" return self . client . _fetch_list ( path = \"/orders\" , model_cls = OrderModel , list_key = \"orders\" , params = { \"offset\" : offset , \"campaign_id\" : campaign_id , \"external_id\" : external_id , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte , \"limit\" : limit } ) reject ( id ) \u00b6 Rejects an order that is pending review, identified by the given id in the URL. Parameters: Name Type Description Default id str The ID of the order. required Source code in tremendous/orders/order.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def reject ( self , id : str ) -> OrderModel : \"\"\" Rejects an order that is pending review, identified by the given id in the URL. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /reject\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" ) tremendous.Products \u00b6 Client for interacting with Tremendous products. A product represents a payout mechanism for a reward. This class provides methods to retrieve available products and get detailed information about specific products. Tremendous Products API Reference Source code in tremendous/products/product.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class Products : \"\"\" Client for interacting with Tremendous products. A product represents a payout mechanism for a reward. This class provides methods to retrieve available products and get detailed information about specific products. [Tremendous Products API Reference](https://docs.tremendous.com/reference/get_products) \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , country : str = \"US\" , currency : str = \"USD\" , subcategory : str = \"\" ) -> List [ ProductModel ]: \"\"\" Retrieve a list of available products. This method fetches all products available for the specified country, currency, and optionally filtered by subcategory. Args: country (str, optional): Country code (e.g., 'US', 'CA'). Defaults to 'US'. currency (str, optional): Currency code (e.g., 'USD', 'CAD'). Defaults to 'USD'. subcategory (str, optional): Filter by subcategory. Defaults to ''. Returns: List[ProductModel]: List of available products matching the criteria. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) products = client.products.list(country=\"US\", currency=\"USD\") for product in products: print(f\"{product.name}: {product.description}\") ``` \"\"\" return self . client . _fetch_list ( path = \"/products\" , model_cls = ProductModel , list_key = \"products\" , params = { \"country\" : country , \"currency\" : currency , \"subcategory\" : subcategory } ) def get ( self , id : str ) -> ProductModel : \"\"\" Retrieve detailed information about a specific product. Args: id (str): The unique identifier of the product. Returns: ProductModel: Detailed product information. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) product = client.products.get(\"product-123\") print(f\"Product: {product.name}\") print(f\"Available currencies: {product.currency_codes}\") ``` \"\"\" return self . client . _fetch ( path = f \"/products/ { id } \" , model_cls = ProductModel , list_key = 'product' ) get ( id ) \u00b6 Retrieve detailed information about a specific product. Parameters: Name Type Description Default id str The unique identifier of the product. required Returns: Name Type Description ProductModel ProductModel Detailed product information. from tremendous import TremendousClient client = TremendousClient ( api_key = \"your-api-key\" , sandbox = True ) product = client . products . get ( \"product-123\" ) print ( f \"Product: { product . name } \" ) print ( f \"Available currencies: { product . currency_codes } \" ) Source code in tremendous/products/product.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def get ( self , id : str ) -> ProductModel : \"\"\" Retrieve detailed information about a specific product. Args: id (str): The unique identifier of the product. Returns: ProductModel: Detailed product information. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) product = client.products.get(\"product-123\") print(f\"Product: {product.name}\") print(f\"Available currencies: {product.currency_codes}\") ``` \"\"\" return self . client . _fetch ( path = f \"/products/ { id } \" , model_cls = ProductModel , list_key = 'product' ) list ( country = 'US' , currency = 'USD' , subcategory = '' ) \u00b6 Retrieve a list of available products. This method fetches all products available for the specified country, currency, and optionally filtered by subcategory. Parameters: Name Type Description Default country str Country code (e.g., 'US', 'CA'). Defaults to 'US'. 'US' currency str Currency code (e.g., 'USD', 'CAD'). Defaults to 'USD'. 'USD' subcategory str Filter by subcategory. Defaults to ''. '' Returns: Type Description List [ ProductModel ] List[ProductModel]: List of available products matching the criteria. from tremendous import TremendousClient client = TremendousClient ( api_key = \"your-api-key\" , sandbox = True ) products = client . products . list ( country = \"US\" , currency = \"USD\" ) for product in products : print ( f \" { product . name } : { product . description } \" ) Source code in tremendous/products/product.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def list ( self , country : str = \"US\" , currency : str = \"USD\" , subcategory : str = \"\" ) -> List [ ProductModel ]: \"\"\" Retrieve a list of available products. This method fetches all products available for the specified country, currency, and optionally filtered by subcategory. Args: country (str, optional): Country code (e.g., 'US', 'CA'). Defaults to 'US'. currency (str, optional): Currency code (e.g., 'USD', 'CAD'). Defaults to 'USD'. subcategory (str, optional): Filter by subcategory. Defaults to ''. Returns: List[ProductModel]: List of available products matching the criteria. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) products = client.products.list(country=\"US\", currency=\"USD\") for product in products: print(f\"{product.name}: {product.description}\") ``` \"\"\" return self . client . _fetch_list ( path = \"/products\" , model_cls = ProductModel , list_key = \"products\" , params = { \"country\" : country , \"currency\" : currency , \"subcategory\" : subcategory } ) tremendous.Campaigns \u00b6 Source code in tremendous/campaigns/campaigns.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class Campaigns : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ CampaignModel ]: return self . client . _fetch_list ( path = \"/campaigns\" , model_cls = CampaignModel , list_key = \"campaigns\" ) def get ( self , campaign_id : str ) -> CampaignModel : return self . client . _fetch ( path = f \"/campaigns/ { campaign_id } \" , model_cls = CampaignModel , list_key = \"campaign\" ) def create ( self , name : str , description : str , products : List [ str ], webpage_style : Optional [ WebpageStyleModel ] = None , email_style : Optional [ EmailStyleModel ] = None ) -> CampaignModel : return self . client . _create ( path = \"/campaigns\" , model_cls = CampaignModel , params = { \"name\" : name , \"description\" : description , \"products\" : products , \"webpage_style\" : webpage_style , \"email_style\" : email_style }, list_key = \"campaign\" ) def update ( self , id : str , name : Optional [ str ] = None , description : Optional [ str ] = None , products : Optional [ List [ str ]] = None , webpage_style : Optional [ Dict ] = None , email_style : Optional [ Dict ] = None ) -> CampaignModel : return self . client . _update ( path = f \"/campaigns/ { id } \" , model_cls = CampaignModel , params = { \"name\" : name , \"description\" : description , \"products\" : products , \"webpage_style\" : webpage_style , \"email_style\" : email_style }, list_key = \"campaign\" ) tremendous.FundingSources \u00b6 Funding sources represent different ways to pay for orders. Source code in tremendous/funding_sources/funding_source.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class FundingSources : \"\"\" Funding sources represent different ways to pay for orders. \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ FundingSourceModel ]: \"\"\" Retrieve a list of funding sources. \"\"\" return self . client . _fetch_list ( path = \"/funding_sources\" , model_cls = FundingSourceModel , list_key = \"funding_sources\" ) def get ( self , id : str ) -> FundingSourceModel : \"\"\" Retrieve a funding source. Args: id (str): The ID of the funding source. \"\"\" return self . client . _fetch ( path = f \"/funding_sources/ { id } \" , model_cls = FundingSourceModel , list_key = \"funding_source\" ) get ( id ) \u00b6 Retrieve a funding source. Parameters: Name Type Description Default id str The ID of the funding source. required Source code in tremendous/funding_sources/funding_source.py 35 36 37 38 39 40 41 42 43 44 45 46 def get ( self , id : str ) -> FundingSourceModel : \"\"\" Retrieve a funding source. Args: id (str): The ID of the funding source. \"\"\" return self . client . _fetch ( path = f \"/funding_sources/ { id } \" , model_cls = FundingSourceModel , list_key = \"funding_source\" ) list () \u00b6 Retrieve a list of funding sources. Source code in tremendous/funding_sources/funding_source.py 24 25 26 27 28 29 30 31 32 33 def list ( self ) -> List [ FundingSourceModel ]: \"\"\" Retrieve a list of funding sources. \"\"\" return self . client . _fetch_list ( path = \"/funding_sources\" , model_cls = FundingSourceModel , list_key = \"funding_sources\" ) tremendous.Invoices \u00b6 Source code in tremendous/invoices/invoices.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 class Invoices : def __init__ ( self , client : \"Tremendous\" ): self . client = client def get ( self , id : str ) -> InvoiceModel : \"\"\" Retrieve an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _fetch ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" ) def list ( self , offset : int = 0 , limit : int = 10 ) -> List [ InvoiceModel ]: \"\"\" Retrieve a list of invoices. Args: offset (int, optional): Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of invoices returned. \"\"\" return self . client . _fetch_list ( path = \"/invoices\" , model_cls = InvoiceModel , list_key = \"invoices\" , params = { \"offset\" : offset , \"limit\" : limit } ) def create ( self , amount : float , po_number : str , memo : str ) -> InvoiceModel : \"\"\" Create an invoice. Args: amount (float): The amount of the invoice. po_number (str): The PO number of the invoice. memo (str): The memo of the invoice. \"\"\" return self . client . _create ( path = \"/invoices\" , model_cls = InvoiceModel , params = { \"amount\" : amount , \"po_number\" : po_number , \"memo\" : memo }, list_key = \"invoice\" ) def delete ( self , id : str ) -> InvoiceModel : \"\"\" Delete an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _delete ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" , params = { \"id\" : id } ) create ( amount , po_number , memo ) \u00b6 Create an invoice. Parameters: Name Type Description Default amount float The amount of the invoice. required po_number str The PO number of the invoice. required memo str The memo of the invoice. required Source code in tremendous/invoices/invoices.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def create ( self , amount : float , po_number : str , memo : str ) -> InvoiceModel : \"\"\" Create an invoice. Args: amount (float): The amount of the invoice. po_number (str): The PO number of the invoice. memo (str): The memo of the invoice. \"\"\" return self . client . _create ( path = \"/invoices\" , model_cls = InvoiceModel , params = { \"amount\" : amount , \"po_number\" : po_number , \"memo\" : memo }, list_key = \"invoice\" ) delete ( id ) \u00b6 Delete an invoice. Parameters: Name Type Description Default id str The ID of the invoice. required Source code in tremendous/invoices/invoices.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def delete ( self , id : str ) -> InvoiceModel : \"\"\" Delete an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _delete ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" , params = { \"id\" : id } ) get ( id ) \u00b6 Retrieve an invoice. Parameters: Name Type Description Default id str The ID of the invoice. required Source code in tremendous/invoices/invoices.py 25 26 27 28 29 30 31 32 33 34 35 36 def get ( self , id : str ) -> InvoiceModel : \"\"\" Retrieve an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _fetch ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" ) list ( offset = 0 , limit = 10 ) \u00b6 Retrieve a list of invoices. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). 0 limit int Limits the number of invoices returned. 10 Source code in tremendous/invoices/invoices.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def list ( self , offset : int = 0 , limit : int = 10 ) -> List [ InvoiceModel ]: \"\"\" Retrieve a list of invoices. Args: offset (int, optional): Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of invoices returned. \"\"\" return self . client . _fetch_list ( path = \"/invoices\" , model_cls = InvoiceModel , list_key = \"invoices\" , params = { \"offset\" : offset , \"limit\" : limit } ) tremendous.Topups \u00b6 Source code in tremendous/topups/topup.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Topups : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , offset : int = 0 ) -> List [ TopupModel ]: \"\"\" Retrieve a list of topups. Args: offset (int, optional): Offsets the returned list by the given number of topups. The returned topups are ordered (and offsetted) by their creation date (DESC). \"\"\" return self . client . _fetch_list ( path = \"/topups\" , model_cls = TopupModel , list_key = \"topups\" , params = { \"offset\" : offset } ) def get ( self , id : str ) -> TopupModel : \"\"\" Retrieve a topup. \"\"\" return self . client . _fetch ( path = f \"/topups/ { id } \" , model_cls = TopupModel , list_key = \"topup\" ) def create ( self , amount : float , idempotency_key : str , funding_source_id : str ) -> TopupModel : \"\"\" Create a topup. Args: amount (float): The amount of the topup. idempotency_key (str): The idempotency key of the topup. funding_source_id (str): The funding source ID of the topup. \"\"\" return self . client . _create ( path = \"/topups\" , model_cls = TopupModel , params = { \"amount\" : amount , \"idempotency_key\" : idempotency_key , \"funding_source_id\" : funding_source_id }, list_key = \"topup\" ) create ( amount , idempotency_key , funding_source_id ) \u00b6 Create a topup. Parameters: Name Type Description Default amount float The amount of the topup. required idempotency_key str The idempotency key of the topup. required funding_source_id str The funding source ID of the topup. required Source code in tremendous/topups/topup.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def create ( self , amount : float , idempotency_key : str , funding_source_id : str ) -> TopupModel : \"\"\" Create a topup. Args: amount (float): The amount of the topup. idempotency_key (str): The idempotency key of the topup. funding_source_id (str): The funding source ID of the topup. \"\"\" return self . client . _create ( path = \"/topups\" , model_cls = TopupModel , params = { \"amount\" : amount , \"idempotency_key\" : idempotency_key , \"funding_source_id\" : funding_source_id }, list_key = \"topup\" ) get ( id ) \u00b6 Retrieve a topup. Source code in tremendous/topups/topup.py 41 42 43 44 45 46 47 48 49 def get ( self , id : str ) -> TopupModel : \"\"\" Retrieve a topup. \"\"\" return self . client . _fetch ( path = f \"/topups/ { id } \" , model_cls = TopupModel , list_key = \"topup\" ) list ( offset = 0 ) \u00b6 Retrieve a list of topups. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of topups. The returned topups are ordered (and offsetted) by their creation date (DESC). 0 Source code in tremendous/topups/topup.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def list ( self , offset : int = 0 ) -> List [ TopupModel ]: \"\"\" Retrieve a list of topups. Args: offset (int, optional): Offsets the returned list by the given number of topups. The returned topups are ordered (and offsetted) by their creation date (DESC). \"\"\" return self . client . _fetch_list ( path = \"/topups\" , model_cls = TopupModel , list_key = \"topups\" , params = { \"offset\" : offset } ) tremendous.BalanceTransactions \u00b6 Source code in tremendous/balance_transactions/balance_transaction.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class BalanceTransactions : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , offset : int = 0 , limit : int = 10 , created_at_gte : str = None , created_at_lte : str = None ) -> List [ BalanceTransactionModel ]: \"\"\" Retrieve a list of balance transactions. Args: offset (int, optional): Offsets the returned list by the given number of balance transactions. The returned balance transactions are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of balance transactions returned. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. \"\"\" return self . client . _fetch_list ( path = \"/balance_transactions\" , model_cls = BalanceTransactionModel , list_key = \"transactions\" , params = { \"offset\" : offset , \"limit\" : limit , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte } ) list ( offset = 0 , limit = 10 , created_at_gte = None , created_at_lte = None ) \u00b6 Retrieve a list of balance transactions. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of balance transactions. The returned balance transactions are ordered (and offsetted) by their creation date (DESC). 0 limit int Limits the number of balance transactions returned. 10 created_at_gte str Filter by created at greater than or equal to. None created_at_lte str Filter by created at less than or equal to. None Source code in tremendous/balance_transactions/balance_transaction.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def list ( self , offset : int = 0 , limit : int = 10 , created_at_gte : str = None , created_at_lte : str = None ) -> List [ BalanceTransactionModel ]: \"\"\" Retrieve a list of balance transactions. Args: offset (int, optional): Offsets the returned list by the given number of balance transactions. The returned balance transactions are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of balance transactions returned. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. \"\"\" return self . client . _fetch_list ( path = \"/balance_transactions\" , model_cls = BalanceTransactionModel , list_key = \"transactions\" , params = { \"offset\" : offset , \"limit\" : limit , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte } ) tremendous.Organizations \u00b6 Source code in tremendous/organizations/organization.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 class Organizations : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ OrganizationModel ]: \"\"\" Retrieve a list of organizations. Returns: List[OrganizationModel]: A list of organization objects. \"\"\" return self . client . _fetch_list ( path = \"/organizations\" , model_cls = OrganizationModel , list_key = \"organizations\" ) def get ( self , id : str ) -> OrganizationModel : \"\"\" Retrieve an organization by ID. Args: id (str): The ID of the organization to retrieve. Returns: OrganizationModel: The organization object. \"\"\" return self . client . _fetch ( path = f \"/organizations/ { id } \" , model_cls = OrganizationModel , list_key = \"organization\" ) def create ( self , name : str , website : str , with_api_key : bool = False , copy_settings : str = None , phone : str = None ) -> OrganizationModel : \"\"\" Create a new organization. Args: name (str): The name of the organization. website (str): The website URL of the organization. with_api_key (bool, optional): Whether to create an API key for the organization. copy_settings (str, optional): A list of the settings that you wish to copy over to the new organization. See: https://developers.tremendous.com/reference/create-organization phone (str, optional): The phone number of the organization. Returns: OrganizationModel: The created organization object. \"\"\" return self . client . _create ( path = \"/organizations\" , model_cls = OrganizationModel , params = { \"name\" : name , \"website\" : website , \"with_api_key\" : with_api_key , \"copy_settings\" : copy_settings , \"phone\" : phone }, list_key = \"organization\" ) def create_api_key ( self ) -> OrganizationModel : \"\"\" Create an API key for an organization. Args: None \"\"\" return self . client . _create ( path = f \"/organizations/create_api_key\" , model_cls = None , list_key = None ) create ( name , website , with_api_key = False , copy_settings = None , phone = None ) \u00b6 Create a new organization. Parameters: Name Type Description Default name str The name of the organization. required website str The website URL of the organization. required with_api_key bool Whether to create an API key for the organization. False copy_settings str A list of the settings that you wish to copy over to the new organization. See: https://developers.tremendous.com/reference/create-organization None phone str The phone number of the organization. None Returns: Name Type Description OrganizationModel OrganizationModel The created organization object. Source code in tremendous/organizations/organization.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create ( self , name : str , website : str , with_api_key : bool = False , copy_settings : str = None , phone : str = None ) -> OrganizationModel : \"\"\" Create a new organization. Args: name (str): The name of the organization. website (str): The website URL of the organization. with_api_key (bool, optional): Whether to create an API key for the organization. copy_settings (str, optional): A list of the settings that you wish to copy over to the new organization. See: https://developers.tremendous.com/reference/create-organization phone (str, optional): The phone number of the organization. Returns: OrganizationModel: The created organization object. \"\"\" return self . client . _create ( path = \"/organizations\" , model_cls = OrganizationModel , params = { \"name\" : name , \"website\" : website , \"with_api_key\" : with_api_key , \"copy_settings\" : copy_settings , \"phone\" : phone }, list_key = \"organization\" ) create_api_key () \u00b6 Create an API key for an organization. Source code in tremendous/organizations/organization.py 69 70 71 72 73 74 75 76 77 78 79 80 def create_api_key ( self ) -> OrganizationModel : \"\"\" Create an API key for an organization. Args: None \"\"\" return self . client . _create ( path = f \"/organizations/create_api_key\" , model_cls = None , list_key = None ) get ( id ) \u00b6 Retrieve an organization by ID. Parameters: Name Type Description Default id str The ID of the organization to retrieve. required Returns: Name Type Description OrganizationModel OrganizationModel The organization object. Source code in tremendous/organizations/organization.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def get ( self , id : str ) -> OrganizationModel : \"\"\" Retrieve an organization by ID. Args: id (str): The ID of the organization to retrieve. Returns: OrganizationModel: The organization object. \"\"\" return self . client . _fetch ( path = f \"/organizations/ { id } \" , model_cls = OrganizationModel , list_key = \"organization\" ) list () \u00b6 Retrieve a list of organizations. Returns: Type Description List [ OrganizationModel ] List[OrganizationModel]: A list of organization objects. Source code in tremendous/organizations/organization.py 19 20 21 22 23 24 25 26 27 28 29 30 def list ( self ) -> List [ OrganizationModel ]: \"\"\" Retrieve a list of organizations. Returns: List[OrganizationModel]: A list of organization objects. \"\"\" return self . client . _fetch_list ( path = \"/organizations\" , model_cls = OrganizationModel , list_key = \"organizations\" ) tremendous.Members \u00b6 Source code in tremendous/members/member.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Members : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ MemberModel ]: \"\"\" Retrieve a list of members. Returns: List[MemberModel]: A list of member objects. \"\"\" return self . client . _fetch_list ( path = \"/members\" , model_cls = MemberModel , list_key = \"members\" ) def get ( self , id : str ) -> MemberModel : \"\"\" Retrieve a member. Args: id (str): The ID of the member. Returns: MemberModel: The member object. \"\"\" return self . client . _fetch ( path = f \"/members/ { id } \" , model_cls = MemberModel , list_key = \"member\" ) def create ( self , email : str , role : str ) -> MemberModel : \"\"\" Create a member. Args: email (str): The email of the member. role (str): The role of the member. Returns: MemberModel: The created member object. \"\"\" return self . client . _create ( path = \"/members\" , model_cls = MemberModel , params = { \"email\" : email , \"role\" : role }, list_key = \"member\" ) create ( email , role ) \u00b6 Create a member. Parameters: Name Type Description Default email str The email of the member. required role str The role of the member. required Returns: Name Type Description MemberModel MemberModel The created member object. Source code in tremendous/members/member.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create ( self , email : str , role : str ) -> MemberModel : \"\"\" Create a member. Args: email (str): The email of the member. role (str): The role of the member. Returns: MemberModel: The created member object. \"\"\" return self . client . _create ( path = \"/members\" , model_cls = MemberModel , params = { \"email\" : email , \"role\" : role }, list_key = \"member\" ) get ( id ) \u00b6 Retrieve a member. Parameters: Name Type Description Default id str The ID of the member. required Returns: Name Type Description MemberModel MemberModel The member object. Source code in tremendous/members/member.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def get ( self , id : str ) -> MemberModel : \"\"\" Retrieve a member. Args: id (str): The ID of the member. Returns: MemberModel: The member object. \"\"\" return self . client . _fetch ( path = f \"/members/ { id } \" , model_cls = MemberModel , list_key = \"member\" ) list () \u00b6 Retrieve a list of members. Returns: Type Description List [ MemberModel ] List[MemberModel]: A list of member objects. Source code in tremendous/members/member.py 22 23 24 25 26 27 28 29 30 31 32 33 def list ( self ) -> List [ MemberModel ]: \"\"\" Retrieve a list of members. Returns: List[MemberModel]: A list of member objects. \"\"\" return self . client . _fetch_list ( path = \"/members\" , model_cls = MemberModel , list_key = \"members\" ) tremendous.Roles \u00b6 Source code in tremendous/roles/role.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Roles : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ RoleModel ]: \"\"\" Retrieve a list of roles. Args: None Returns: List[RoleModel]: A list of role objects. \"\"\" return self . client . _fetch_list ( path = \"/roles\" , model_cls = RoleModel , list_key = \"roles\" ) list () \u00b6 Retrieve a list of roles. Args: None Returns: Type Description List [ RoleModel ] List[RoleModel]: A list of role objects. Source code in tremendous/roles/role.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def list ( self ) -> List [ RoleModel ]: \"\"\" Retrieve a list of roles. Args: None Returns: List[RoleModel]: A list of role objects. \"\"\" return self . client . _fetch_list ( path = \"/roles\" , model_cls = RoleModel , list_key = \"roles\" ) tremendous.Fields \u00b6 Source code in tremendous/fields/field.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Fields : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ FieldModel ]: \"\"\" Retrieve a list of fields. For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. Returns: List[FieldModel]: A list of field objects. \"\"\" return self . client . _fetch_list ( path = \"/fields\" , model_cls = FieldModel , list_key = \"fields\" ) list () \u00b6 Retrieve a list of fields. For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. Returns: Type Description List [ FieldModel ] List[FieldModel]: A list of field objects. Source code in tremendous/fields/field.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def list ( self ) -> List [ FieldModel ]: \"\"\" Retrieve a list of fields. For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. Returns: List[FieldModel]: A list of field objects. \"\"\" return self . client . _fetch_list ( path = \"/fields\" , model_cls = FieldModel , list_key = \"fields\" ) tremendous.Webhooks \u00b6 Source code in tremendous/webhooks/webhook.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class Webhooks : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ WebhookModel ]: \"\"\" Retrieve a list of webhooks. \"\"\" return self . client . _fetch_list ( path = \"/webhooks\" , model_cls = WebhookModel , list_key = \"webhooks\" ) def get ( self , id : str ) -> WebhookModel : \"\"\" Retrieve a webhook. \"\"\" return self . client . _fetch ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" ) def create ( self , url : str ) -> WebhookModel : \"\"\" Create a webhook. \"\"\" return self . client . _create ( path = \"/webhooks\" , model_cls = WebhookModel , params = { \"url\" : url }, list_key = \"webhook\" ) def delete ( self , id : str ) -> WebhookModel : \"\"\" Delete a webhook. \"\"\" return self . client . _delete ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" ) def test_webhook ( self , id : str , event : str ) -> WebhookModel : \"\"\" Making a request to this endpoint will cause our system to trigger a webhook for the specified event. Tremendous webhooks guide: https://developers.tremendous.com/docs/webhooks-1 Args: id (str): The ID of the webhook. event (str): The event to test the webhook for. Returns: WebhookModel: The webhook object. \"\"\" url = f \" { self . client . base_url } /webhooks/ { id } /simulate\" payload = { \"event\" : event } headers = { \"accept\" : \"text/html\" , \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { self . client . api_key } \" } response = requests . post ( url , headers = headers , json = payload ) return response def list_events ( self , id : str ) -> List [ str ]: \"\"\" List all events that can be used to test a webhook. Args: id (str): The ID of the webhook. Returns: EventModel: A list of events. \"\"\" return self . client . _fetch_list ( path = f \"/webhooks/ { id } /events\" , model_cls = EventModel , list_key = None ) create ( url ) \u00b6 Create a webhook. Source code in tremendous/webhooks/webhook.py 40 41 42 43 44 45 46 47 48 49 def create ( self , url : str ) -> WebhookModel : \"\"\" Create a webhook. \"\"\" return self . client . _create ( path = \"/webhooks\" , model_cls = WebhookModel , params = { \"url\" : url }, list_key = \"webhook\" ) delete ( id ) \u00b6 Delete a webhook. Source code in tremendous/webhooks/webhook.py 51 52 53 54 55 56 57 58 59 def delete ( self , id : str ) -> WebhookModel : \"\"\" Delete a webhook. \"\"\" return self . client . _delete ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" ) get ( id ) \u00b6 Retrieve a webhook. Source code in tremendous/webhooks/webhook.py 30 31 32 33 34 35 36 37 38 def get ( self , id : str ) -> WebhookModel : \"\"\" Retrieve a webhook. \"\"\" return self . client . _fetch ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" ) list () \u00b6 Retrieve a list of webhooks. Source code in tremendous/webhooks/webhook.py 20 21 22 23 24 25 26 27 28 def list ( self ) -> List [ WebhookModel ]: \"\"\" Retrieve a list of webhooks. \"\"\" return self . client . _fetch_list ( path = \"/webhooks\" , model_cls = WebhookModel , list_key = \"webhooks\" ) list_events ( id ) \u00b6 List all events that can be used to test a webhook. Parameters: Name Type Description Default id str The ID of the webhook. required Returns: Name Type Description EventModel List [ str ] A list of events. Source code in tremendous/webhooks/webhook.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def list_events ( self , id : str ) -> List [ str ]: \"\"\" List all events that can be used to test a webhook. Args: id (str): The ID of the webhook. Returns: EventModel: A list of events. \"\"\" return self . client . _fetch_list ( path = f \"/webhooks/ { id } /events\" , model_cls = EventModel , list_key = None ) test_webhook ( id , event ) \u00b6 Making a request to this endpoint will cause our system to trigger a webhook for the specified event. Tremendous webhooks guide: https://developers.tremendous.com/docs/webhooks-1 Parameters: Name Type Description Default id str The ID of the webhook. required event str The event to test the webhook for. required Returns: Name Type Description WebhookModel WebhookModel The webhook object. Source code in tremendous/webhooks/webhook.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def test_webhook ( self , id : str , event : str ) -> WebhookModel : \"\"\" Making a request to this endpoint will cause our system to trigger a webhook for the specified event. Tremendous webhooks guide: https://developers.tremendous.com/docs/webhooks-1 Args: id (str): The ID of the webhook. event (str): The event to test the webhook for. Returns: WebhookModel: The webhook object. \"\"\" url = f \" { self . client . base_url } /webhooks/ { id } /simulate\" payload = { \"event\" : event } headers = { \"accept\" : \"text/html\" , \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { self . client . api_key } \" } response = requests . post ( url , headers = headers , json = payload ) return response tremendous.Forex \u00b6 Source code in tremendous/forex/forex.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Forex : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , base : str ) -> ForexModel : \"\"\" Retrieve a list of exchange rates Args: base (str): The base currency to get exchange rates for. Returns: ForexModel: A list of exchange rates. \"\"\" return self . client . _fetch_list ( path = \"/forex\" , model_cls = ForexModel , params = { \"base\" : base } ) list ( base ) \u00b6 Retrieve a list of exchange rates Parameters: Name Type Description Default base str The base currency to get exchange rates for. required Returns: Name Type Description ForexModel ForexModel A list of exchange rates. Source code in tremendous/forex/forex.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def list ( self , base : str ) -> ForexModel : \"\"\" Retrieve a list of exchange rates Args: base (str): The base currency to get exchange rates for. Returns: ForexModel: A list of exchange rates. \"\"\" return self . client . _fetch_list ( path = \"/forex\" , model_cls = ForexModel , params = { \"base\" : base } )","title":"API Reference"},{"location":"reference/#initialization","text":"Before we can make any requests, we need to initialize the client. Every request follows the same schema. from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"<your-api-key>\" , sandbox = True ) tremendous .< resource >.< method ( paramters ) >","title":"Initialization"},{"location":"reference/#working-example","text":"from tremendous import TremendousClient tremendous = TremendousClient ( api_key = \"<your-api-key>\" , sandbox = True ) tremendous . Rewards . list ( offset = 0 , limit = 10 ) For production enviornments, set Sandbox to False and replace your API Key with the production API Key.","title":"Working Example"},{"location":"reference/#tremendous.Rewards","text":"A reward is a monetary incentive sent to an individual recipient. Rewards have an amount, a delivery method, and a set of redemption choices available to the recipient. Tremendous Rewards API Reference Source code in tremendous/rewards/reward.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class Rewards : \"\"\" A reward is a monetary incentive sent to an individual recipient. Rewards have an amount, a delivery method, and a set of redemption choices available to the recipient. [Tremendous Rewards API Reference](https://developers.tremendous.com/reference/rewards) \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def get ( self , id : str ) -> RewardModel : \"\"\" Retrieve a reward by its ID. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.get(\"1234567890\") ``` \"\"\" return self . client . _fetch ( path = f \"/rewards/ { id } \" , model_cls = RewardModel , list_key = \"reward\" ) def list ( self , offset : int = 0 , limit : int = 100 ) -> List [ RewardModel ]: \"\"\" Retrieve a list of rewards. Args: offset (int, optional): Offsets and orders by their creation date. limit (int, optional): Limits the number of rewards returned. Returns: RewardModel: The list of rewards. ```python tremendous.Rewards.list() ``` \"\"\" return self . client . _fetch_list ( path = \"/rewards\" , model_cls = RewardModel , list_key = \"rewards\" , params = { \"offset\" : offset , \"limit\" : limit } ) def generate_reward_url ( self , id : str ) -> str : \"\"\" Generate a redemption link for the reward identified by the id. Args: id (str): The ID of the reward. Returns: URL: The redemption link. ```python tremendous.Rewards.generate_reward_url(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /generate_link\" , params = { \"id\" : id } ) def resend_reward ( self , id : str , updated_email : str = None , updated_phone : str = None ) -> RewardModel : \"\"\" Resends a reward, identified by the given id, to its recipient. Only rewards with a previous delivery failure can be resent. Args: id (str): The ID of the reward. updated_email (str, optional): The email address to send the reward to. updated_phone (str, optional): The phone number to send the reward to. Returns: RewardModel: The reward. ```python tremendous.Rewards.resend_reward(\"1234567890\", updated_email=\"test@test.com\", updated_phone=\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /resend\" , params = { \"id\" : id , \"updated_email\" : updated_email , \"updated_phone\" : updated_phone } ) def cancel_reward ( self , id : str ) -> RewardModel : \"\"\" Cancels a reward, identified by the given id. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.cancel_reward(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /cancel\" , params = { \"id\" : id } )","title":"Rewards"},{"location":"reference/#tremendous.Rewards.cancel_reward","text":"Cancels a reward, identified by the given id. Parameters: Name Type Description Default id str The ID of the reward. required Returns: Name Type Description RewardModel RewardModel The reward. tremendous . Rewards . cancel_reward ( \"1234567890\" ) Source code in tremendous/rewards/reward.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 def cancel_reward ( self , id : str ) -> RewardModel : \"\"\" Cancels a reward, identified by the given id. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.cancel_reward(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /cancel\" , params = { \"id\" : id } )","title":"cancel_reward"},{"location":"reference/#tremendous.Rewards.generate_reward_url","text":"Generate a redemption link for the reward identified by the id. Parameters: Name Type Description Default id str The ID of the reward. required Returns: Name Type Description URL str The redemption link. tremendous . Rewards . generate_reward_url ( \"1234567890\" ) Source code in tremendous/rewards/reward.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def generate_reward_url ( self , id : str ) -> str : \"\"\" Generate a redemption link for the reward identified by the id. Args: id (str): The ID of the reward. Returns: URL: The redemption link. ```python tremendous.Rewards.generate_reward_url(\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /generate_link\" , params = { \"id\" : id } )","title":"generate_reward_url"},{"location":"reference/#tremendous.Rewards.get","text":"Retrieve a reward by its ID. Parameters: Name Type Description Default id str The ID of the reward. required Returns: Name Type Description RewardModel RewardModel The reward. tremendous . Rewards . get ( \"1234567890\" ) Source code in tremendous/rewards/reward.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def get ( self , id : str ) -> RewardModel : \"\"\" Retrieve a reward by its ID. Args: id (str): The ID of the reward. Returns: RewardModel: The reward. ```python tremendous.Rewards.get(\"1234567890\") ``` \"\"\" return self . client . _fetch ( path = f \"/rewards/ { id } \" , model_cls = RewardModel , list_key = \"reward\" )","title":"get"},{"location":"reference/#tremendous.Rewards.list","text":"Retrieve a list of rewards. Parameters: Name Type Description Default offset int Offsets and orders by their creation date. 0 limit int Limits the number of rewards returned. 100 Returns: Name Type Description RewardModel List [ RewardModel ] The list of rewards. tremendous . Rewards . list () Source code in tremendous/rewards/reward.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def list ( self , offset : int = 0 , limit : int = 100 ) -> List [ RewardModel ]: \"\"\" Retrieve a list of rewards. Args: offset (int, optional): Offsets and orders by their creation date. limit (int, optional): Limits the number of rewards returned. Returns: RewardModel: The list of rewards. ```python tremendous.Rewards.list() ``` \"\"\" return self . client . _fetch_list ( path = \"/rewards\" , model_cls = RewardModel , list_key = \"rewards\" , params = { \"offset\" : offset , \"limit\" : limit } )","title":"list"},{"location":"reference/#tremendous.Rewards.resend_reward","text":"Resends a reward, identified by the given id, to its recipient. Only rewards with a previous delivery failure can be resent. Parameters: Name Type Description Default id str The ID of the reward. required updated_email str The email address to send the reward to. None updated_phone str The phone number to send the reward to. None Returns: Name Type Description RewardModel RewardModel The reward. tremendous . Rewards . resend_reward ( \"1234567890\" , updated_email = \"test@test.com\" , updated_phone = \"1234567890\" ) Source code in tremendous/rewards/reward.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def resend_reward ( self , id : str , updated_email : str = None , updated_phone : str = None ) -> RewardModel : \"\"\" Resends a reward, identified by the given id, to its recipient. Only rewards with a previous delivery failure can be resent. Args: id (str): The ID of the reward. updated_email (str, optional): The email address to send the reward to. updated_phone (str, optional): The phone number to send the reward to. Returns: RewardModel: The reward. ```python tremendous.Rewards.resend_reward(\"1234567890\", updated_email=\"test@test.com\", updated_phone=\"1234567890\") ``` \"\"\" return self . client . _create ( path = f \"/rewards/ { id } /resend\" , params = { \"id\" : id , \"updated_email\" : updated_email , \"updated_phone\" : updated_phone } )","title":"resend_reward"},{"location":"reference/#tremendous.Orders","text":"The order object wraps the fulfillment of one or more rewards. If you want to send rewards via the API, you'll do it by creating an order. Tremendous Orders API Reference Source code in tremendous/orders/order.pyclass Orders : \"\"\" The order object wraps the fulfillment of one or more rewards. If you want to send rewards via the API, you'll do it by creating an order. [Tremendous Orders API Reference](https://developers.tremendous.com/reference/orders) \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def get ( self , order_id : str ) -> OrderModel : \"\"\" Retrieve an order by its ID. Args: order_id (str): The ID of the order. Returns: OrderModel: The order. \"\"\" return self . client . _fetch ( path = f \"/orders/ { order_id } \" , model_cls = OrderModel , list_key = \"order\" ) def list ( self , offset : int = 0 , campaign_id : str = None , external_id : str = None , created_at_gte : str = None , created_at_lte : str = None , limit : int = 10 ) -> List [ OrderModel ]: \"\"\" Retrieve a list of orders. Args: offset (int, optional): Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC). campaign_id (str, optional): Filter by campaign ID. external_id (str, optional): Filter by external ID. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. limit (int, optional): Limits the number of orders returned. \"\"\" return self . client . _fetch_list ( path = \"/orders\" , model_cls = OrderModel , list_key = \"orders\" , params = { \"offset\" : offset , \"campaign_id\" : campaign_id , \"external_id\" : external_id , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte , \"limit\" : limit } ) def create ( self , payment_funding_source_id : str , recipient : Dict , value : Dict , campaign_id : Optional [ str ] = None , products : Optional [ List [ Dict ]] = None , external_id : Optional [ str ] = None , deliver_at : str = None , custom_fields : List [ Dict [ str , str ]] = None , language : str = \"en\" , delivery_method : Dict = None , meta_data : Dict [ str , str ] = None ) -> OrderModel : \"\"\" Create an order. Args: external_id (str): The external ID of the order. payment_funding_source_id (str): The payment funding source ID of the order. products (List[Dict]): The products of the order. value (Dict): The value of the order. recipient (Dict): The recipient of the order. deliver_at (str, optional): The deliver at of the order. custom_fields (Dict[str, str], optional): The custom fields of the order. language (str, optional): The language of the order. delivery_method (Dict, optional): The delivery method of the order. \"\"\" return self . client . _create ( path = \"/orders\" , model_cls = OrderModel , params = { \"external_id\" : external_id , \"payment\" : { \"funding_source_id\" : payment_funding_source_id }, \"reward\" : { \"campaign_id\" : campaign_id , \"products\" : products , \"recipient\" : recipient , \"value\" : value , \"deliver_at\" : deliver_at , \"custom_fields\" : [ custom_fields ], \"language\" : language , \"delivery\" : delivery_method , \"meta_data\" : meta_data }, }, list_key = \"order\" ) def approve ( self , id : str ) -> OrderModel : \"\"\" Approves an order that is pending review, identified by the given id in the URL. Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable 'Allow approvals via API' via the organization's 'Order Approvals' settings from the Tremendous dashboard. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /approve\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" ) def reject ( self , id : str ) -> OrderModel : \"\"\" Rejects an order that is pending review, identified by the given id in the URL. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /reject\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" )","title":"Orders"},{"location":"reference/#tremendous.Orders.approve","text":"Approves an order that is pending review, identified by the given id in the URL. Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable 'Allow approvals via API' via the organization's 'Order Approvals' settings from the Tremendous dashboard. Parameters: Name Type Description Default id str The ID of the order. required Source code in tremendous/orders/order.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 def approve ( self , id : str ) -> OrderModel : \"\"\" Approves an order that is pending review, identified by the given id in the URL. Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable 'Allow approvals via API' via the organization's 'Order Approvals' settings from the Tremendous dashboard. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /approve\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" )","title":"approve"},{"location":"reference/#tremendous.Orders.create","text":"Create an order. Parameters: Name Type Description Default external_id str The external ID of the order. None payment_funding_source_id str The payment funding source ID of the order. required products List [ Dict ] The products of the order. None value Dict The value of the order. required recipient Dict The recipient of the order. required deliver_at str The deliver at of the order. None custom_fields Dict [ str , str ] The custom fields of the order. None language str The language of the order. 'en' delivery_method Dict The delivery method of the order. None Source code in tremendous/orders/order.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def create ( self , payment_funding_source_id : str , recipient : Dict , value : Dict , campaign_id : Optional [ str ] = None , products : Optional [ List [ Dict ]] = None , external_id : Optional [ str ] = None , deliver_at : str = None , custom_fields : List [ Dict [ str , str ]] = None , language : str = \"en\" , delivery_method : Dict = None , meta_data : Dict [ str , str ] = None ) -> OrderModel : \"\"\" Create an order. Args: external_id (str): The external ID of the order. payment_funding_source_id (str): The payment funding source ID of the order. products (List[Dict]): The products of the order. value (Dict): The value of the order. recipient (Dict): The recipient of the order. deliver_at (str, optional): The deliver at of the order. custom_fields (Dict[str, str], optional): The custom fields of the order. language (str, optional): The language of the order. delivery_method (Dict, optional): The delivery method of the order. \"\"\" return self . client . _create ( path = \"/orders\" , model_cls = OrderModel , params = { \"external_id\" : external_id , \"payment\" : { \"funding_source_id\" : payment_funding_source_id }, \"reward\" : { \"campaign_id\" : campaign_id , \"products\" : products , \"recipient\" : recipient , \"value\" : value , \"deliver_at\" : deliver_at , \"custom_fields\" : [ custom_fields ], \"language\" : language , \"delivery\" : delivery_method , \"meta_data\" : meta_data }, }, list_key = \"order\" )","title":"create"},{"location":"reference/#tremendous.Orders.get","text":"Retrieve an order by its ID. Parameters: Name Type Description Default order_id str The ID of the order. required Returns: Name Type Description OrderModel OrderModel The order. Source code in tremendous/orders/order.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , order_id : str ) -> OrderModel : \"\"\" Retrieve an order by its ID. Args: order_id (str): The ID of the order. Returns: OrderModel: The order. \"\"\" return self . client . _fetch ( path = f \"/orders/ { order_id } \" , model_cls = OrderModel , list_key = \"order\" )","title":"get"},{"location":"reference/#tremendous.Orders.list","text":"Retrieve a list of orders. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC). 0 campaign_id str Filter by campaign ID. None external_id str Filter by external ID. None created_at_gte str Filter by created at greater than or equal to. None created_at_lte str Filter by created at less than or equal to. None limit int Limits the number of orders returned. 10 Source code in tremendous/orders/order.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def list ( self , offset : int = 0 , campaign_id : str = None , external_id : str = None , created_at_gte : str = None , created_at_lte : str = None , limit : int = 10 ) -> List [ OrderModel ]: \"\"\" Retrieve a list of orders. Args: offset (int, optional): Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC). campaign_id (str, optional): Filter by campaign ID. external_id (str, optional): Filter by external ID. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. limit (int, optional): Limits the number of orders returned. \"\"\" return self . client . _fetch_list ( path = \"/orders\" , model_cls = OrderModel , list_key = \"orders\" , params = { \"offset\" : offset , \"campaign_id\" : campaign_id , \"external_id\" : external_id , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte , \"limit\" : limit } )","title":"list"},{"location":"reference/#tremendous.Orders.reject","text":"Rejects an order that is pending review, identified by the given id in the URL. Parameters: Name Type Description Default id str The ID of the order. required Source code in tremendous/orders/order.py 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 def reject ( self , id : str ) -> OrderModel : \"\"\" Rejects an order that is pending review, identified by the given id in the URL. Args: id (str): The ID of the order. \"\"\" return self . client . _create ( path = f \"/order_approvals/ { id } /reject\" , model_cls = OrderModel , params = { \"id\" : id }, list_key = \"order\" )","title":"reject"},{"location":"reference/#tremendous.Products","text":"Client for interacting with Tremendous products. A product represents a payout mechanism for a reward. This class provides methods to retrieve available products and get detailed information about specific products. Tremendous Products API Reference Source code in tremendous/products/product.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class Products : \"\"\" Client for interacting with Tremendous products. A product represents a payout mechanism for a reward. This class provides methods to retrieve available products and get detailed information about specific products. [Tremendous Products API Reference](https://docs.tremendous.com/reference/get_products) \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , country : str = \"US\" , currency : str = \"USD\" , subcategory : str = \"\" ) -> List [ ProductModel ]: \"\"\" Retrieve a list of available products. This method fetches all products available for the specified country, currency, and optionally filtered by subcategory. Args: country (str, optional): Country code (e.g., 'US', 'CA'). Defaults to 'US'. currency (str, optional): Currency code (e.g., 'USD', 'CAD'). Defaults to 'USD'. subcategory (str, optional): Filter by subcategory. Defaults to ''. Returns: List[ProductModel]: List of available products matching the criteria. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) products = client.products.list(country=\"US\", currency=\"USD\") for product in products: print(f\"{product.name}: {product.description}\") ``` \"\"\" return self . client . _fetch_list ( path = \"/products\" , model_cls = ProductModel , list_key = \"products\" , params = { \"country\" : country , \"currency\" : currency , \"subcategory\" : subcategory } ) def get ( self , id : str ) -> ProductModel : \"\"\" Retrieve detailed information about a specific product. Args: id (str): The unique identifier of the product. Returns: ProductModel: Detailed product information. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) product = client.products.get(\"product-123\") print(f\"Product: {product.name}\") print(f\"Available currencies: {product.currency_codes}\") ``` \"\"\" return self . client . _fetch ( path = f \"/products/ { id } \" , model_cls = ProductModel , list_key = 'product' )","title":"Products"},{"location":"reference/#tremendous.Products.get","text":"Retrieve detailed information about a specific product. Parameters: Name Type Description Default id str The unique identifier of the product. required Returns: Name Type Description ProductModel ProductModel Detailed product information. from tremendous import TremendousClient client = TremendousClient ( api_key = \"your-api-key\" , sandbox = True ) product = client . products . get ( \"product-123\" ) print ( f \"Product: { product . name } \" ) print ( f \"Available currencies: { product . currency_codes } \" ) Source code in tremendous/products/product.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def get ( self , id : str ) -> ProductModel : \"\"\" Retrieve detailed information about a specific product. Args: id (str): The unique identifier of the product. Returns: ProductModel: Detailed product information. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) product = client.products.get(\"product-123\") print(f\"Product: {product.name}\") print(f\"Available currencies: {product.currency_codes}\") ``` \"\"\" return self . client . _fetch ( path = f \"/products/ { id } \" , model_cls = ProductModel , list_key = 'product' )","title":"get"},{"location":"reference/#tremendous.Products.list","text":"Retrieve a list of available products. This method fetches all products available for the specified country, currency, and optionally filtered by subcategory. Parameters: Name Type Description Default country str Country code (e.g., 'US', 'CA'). Defaults to 'US'. 'US' currency str Currency code (e.g., 'USD', 'CAD'). Defaults to 'USD'. 'USD' subcategory str Filter by subcategory. Defaults to ''. '' Returns: Type Description List [ ProductModel ] List[ProductModel]: List of available products matching the criteria. from tremendous import TremendousClient client = TremendousClient ( api_key = \"your-api-key\" , sandbox = True ) products = client . products . list ( country = \"US\" , currency = \"USD\" ) for product in products : print ( f \" { product . name } : { product . description } \" ) Source code in tremendous/products/product.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 def list ( self , country : str = \"US\" , currency : str = \"USD\" , subcategory : str = \"\" ) -> List [ ProductModel ]: \"\"\" Retrieve a list of available products. This method fetches all products available for the specified country, currency, and optionally filtered by subcategory. Args: country (str, optional): Country code (e.g., 'US', 'CA'). Defaults to 'US'. currency (str, optional): Currency code (e.g., 'USD', 'CAD'). Defaults to 'USD'. subcategory (str, optional): Filter by subcategory. Defaults to ''. Returns: List[ProductModel]: List of available products matching the criteria. ```python from tremendous import TremendousClient client = TremendousClient(api_key=\"your-api-key\", sandbox=True) products = client.products.list(country=\"US\", currency=\"USD\") for product in products: print(f\"{product.name}: {product.description}\") ``` \"\"\" return self . client . _fetch_list ( path = \"/products\" , model_cls = ProductModel , list_key = \"products\" , params = { \"country\" : country , \"currency\" : currency , \"subcategory\" : subcategory } )","title":"list"},{"location":"reference/#tremendous.Campaigns","text":"Source code in tremendous/campaigns/campaigns.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class Campaigns : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ CampaignModel ]: return self . client . _fetch_list ( path = \"/campaigns\" , model_cls = CampaignModel , list_key = \"campaigns\" ) def get ( self , campaign_id : str ) -> CampaignModel : return self . client . _fetch ( path = f \"/campaigns/ { campaign_id } \" , model_cls = CampaignModel , list_key = \"campaign\" ) def create ( self , name : str , description : str , products : List [ str ], webpage_style : Optional [ WebpageStyleModel ] = None , email_style : Optional [ EmailStyleModel ] = None ) -> CampaignModel : return self . client . _create ( path = \"/campaigns\" , model_cls = CampaignModel , params = { \"name\" : name , \"description\" : description , \"products\" : products , \"webpage_style\" : webpage_style , \"email_style\" : email_style }, list_key = \"campaign\" ) def update ( self , id : str , name : Optional [ str ] = None , description : Optional [ str ] = None , products : Optional [ List [ str ]] = None , webpage_style : Optional [ Dict ] = None , email_style : Optional [ Dict ] = None ) -> CampaignModel : return self . client . _update ( path = f \"/campaigns/ { id } \" , model_cls = CampaignModel , params = { \"name\" : name , \"description\" : description , \"products\" : products , \"webpage_style\" : webpage_style , \"email_style\" : email_style }, list_key = \"campaign\" )","title":"Campaigns"},{"location":"reference/#tremendous.FundingSources","text":"Funding sources represent different ways to pay for orders. Source code in tremendous/funding_sources/funding_source.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class FundingSources : \"\"\" Funding sources represent different ways to pay for orders. \"\"\" def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ FundingSourceModel ]: \"\"\" Retrieve a list of funding sources. \"\"\" return self . client . _fetch_list ( path = \"/funding_sources\" , model_cls = FundingSourceModel , list_key = \"funding_sources\" ) def get ( self , id : str ) -> FundingSourceModel : \"\"\" Retrieve a funding source. Args: id (str): The ID of the funding source. \"\"\" return self . client . _fetch ( path = f \"/funding_sources/ { id } \" , model_cls = FundingSourceModel , list_key = \"funding_source\" )","title":"FundingSources"},{"location":"reference/#tremendous.FundingSources.get","text":"Retrieve a funding source. Parameters: Name Type Description Default id str The ID of the funding source. required Source code in tremendous/funding_sources/funding_source.py 35 36 37 38 39 40 41 42 43 44 45 46 def get ( self , id : str ) -> FundingSourceModel : \"\"\" Retrieve a funding source. Args: id (str): The ID of the funding source. \"\"\" return self . client . _fetch ( path = f \"/funding_sources/ { id } \" , model_cls = FundingSourceModel , list_key = \"funding_source\" )","title":"get"},{"location":"reference/#tremendous.FundingSources.list","text":"Retrieve a list of funding sources. Source code in tremendous/funding_sources/funding_source.py 24 25 26 27 28 29 30 31 32 33 def list ( self ) -> List [ FundingSourceModel ]: \"\"\" Retrieve a list of funding sources. \"\"\" return self . client . _fetch_list ( path = \"/funding_sources\" , model_cls = FundingSourceModel , list_key = \"funding_sources\" )","title":"list"},{"location":"reference/#tremendous.Invoices","text":"Source code in tremendous/invoices/invoices.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 class Invoices : def __init__ ( self , client : \"Tremendous\" ): self . client = client def get ( self , id : str ) -> InvoiceModel : \"\"\" Retrieve an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _fetch ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" ) def list ( self , offset : int = 0 , limit : int = 10 ) -> List [ InvoiceModel ]: \"\"\" Retrieve a list of invoices. Args: offset (int, optional): Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of invoices returned. \"\"\" return self . client . _fetch_list ( path = \"/invoices\" , model_cls = InvoiceModel , list_key = \"invoices\" , params = { \"offset\" : offset , \"limit\" : limit } ) def create ( self , amount : float , po_number : str , memo : str ) -> InvoiceModel : \"\"\" Create an invoice. Args: amount (float): The amount of the invoice. po_number (str): The PO number of the invoice. memo (str): The memo of the invoice. \"\"\" return self . client . _create ( path = \"/invoices\" , model_cls = InvoiceModel , params = { \"amount\" : amount , \"po_number\" : po_number , \"memo\" : memo }, list_key = \"invoice\" ) def delete ( self , id : str ) -> InvoiceModel : \"\"\" Delete an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _delete ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" , params = { \"id\" : id } )","title":"Invoices"},{"location":"reference/#tremendous.Invoices.create","text":"Create an invoice. Parameters: Name Type Description Default amount float The amount of the invoice. required po_number str The PO number of the invoice. required memo str The memo of the invoice. required Source code in tremendous/invoices/invoices.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def create ( self , amount : float , po_number : str , memo : str ) -> InvoiceModel : \"\"\" Create an invoice. Args: amount (float): The amount of the invoice. po_number (str): The PO number of the invoice. memo (str): The memo of the invoice. \"\"\" return self . client . _create ( path = \"/invoices\" , model_cls = InvoiceModel , params = { \"amount\" : amount , \"po_number\" : po_number , \"memo\" : memo }, list_key = \"invoice\" )","title":"create"},{"location":"reference/#tremendous.Invoices.delete","text":"Delete an invoice. Parameters: Name Type Description Default id str The ID of the invoice. required Source code in tremendous/invoices/invoices.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def delete ( self , id : str ) -> InvoiceModel : \"\"\" Delete an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _delete ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" , params = { \"id\" : id } )","title":"delete"},{"location":"reference/#tremendous.Invoices.get","text":"Retrieve an invoice. Parameters: Name Type Description Default id str The ID of the invoice. required Source code in tremendous/invoices/invoices.py 25 26 27 28 29 30 31 32 33 34 35 36 def get ( self , id : str ) -> InvoiceModel : \"\"\" Retrieve an invoice. Args: id (str): The ID of the invoice. \"\"\" return self . client . _fetch ( path = f \"/invoices/ { id } \" , model_cls = InvoiceModel , list_key = \"invoice\" )","title":"get"},{"location":"reference/#tremendous.Invoices.list","text":"Retrieve a list of invoices. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). 0 limit int Limits the number of invoices returned. 10 Source code in tremendous/invoices/invoices.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def list ( self , offset : int = 0 , limit : int = 10 ) -> List [ InvoiceModel ]: \"\"\" Retrieve a list of invoices. Args: offset (int, optional): Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of invoices returned. \"\"\" return self . client . _fetch_list ( path = \"/invoices\" , model_cls = InvoiceModel , list_key = \"invoices\" , params = { \"offset\" : offset , \"limit\" : limit } )","title":"list"},{"location":"reference/#tremendous.Topups","text":"Source code in tremendous/topups/topup.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Topups : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , offset : int = 0 ) -> List [ TopupModel ]: \"\"\" Retrieve a list of topups. Args: offset (int, optional): Offsets the returned list by the given number of topups. The returned topups are ordered (and offsetted) by their creation date (DESC). \"\"\" return self . client . _fetch_list ( path = \"/topups\" , model_cls = TopupModel , list_key = \"topups\" , params = { \"offset\" : offset } ) def get ( self , id : str ) -> TopupModel : \"\"\" Retrieve a topup. \"\"\" return self . client . _fetch ( path = f \"/topups/ { id } \" , model_cls = TopupModel , list_key = \"topup\" ) def create ( self , amount : float , idempotency_key : str , funding_source_id : str ) -> TopupModel : \"\"\" Create a topup. Args: amount (float): The amount of the topup. idempotency_key (str): The idempotency key of the topup. funding_source_id (str): The funding source ID of the topup. \"\"\" return self . client . _create ( path = \"/topups\" , model_cls = TopupModel , params = { \"amount\" : amount , \"idempotency_key\" : idempotency_key , \"funding_source_id\" : funding_source_id }, list_key = \"topup\" )","title":"Topups"},{"location":"reference/#tremendous.Topups.create","text":"Create a topup. Parameters: Name Type Description Default amount float The amount of the topup. required idempotency_key str The idempotency key of the topup. required funding_source_id str The funding source ID of the topup. required Source code in tremendous/topups/topup.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def create ( self , amount : float , idempotency_key : str , funding_source_id : str ) -> TopupModel : \"\"\" Create a topup. Args: amount (float): The amount of the topup. idempotency_key (str): The idempotency key of the topup. funding_source_id (str): The funding source ID of the topup. \"\"\" return self . client . _create ( path = \"/topups\" , model_cls = TopupModel , params = { \"amount\" : amount , \"idempotency_key\" : idempotency_key , \"funding_source_id\" : funding_source_id }, list_key = \"topup\" )","title":"create"},{"location":"reference/#tremendous.Topups.get","text":"Retrieve a topup. Source code in tremendous/topups/topup.py 41 42 43 44 45 46 47 48 49 def get ( self , id : str ) -> TopupModel : \"\"\" Retrieve a topup. \"\"\" return self . client . _fetch ( path = f \"/topups/ { id } \" , model_cls = TopupModel , list_key = \"topup\" )","title":"get"},{"location":"reference/#tremendous.Topups.list","text":"Retrieve a list of topups. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of topups. The returned topups are ordered (and offsetted) by their creation date (DESC). 0 Source code in tremendous/topups/topup.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def list ( self , offset : int = 0 ) -> List [ TopupModel ]: \"\"\" Retrieve a list of topups. Args: offset (int, optional): Offsets the returned list by the given number of topups. The returned topups are ordered (and offsetted) by their creation date (DESC). \"\"\" return self . client . _fetch_list ( path = \"/topups\" , model_cls = TopupModel , list_key = \"topups\" , params = { \"offset\" : offset } )","title":"list"},{"location":"reference/#tremendous.BalanceTransactions","text":"Source code in tremendous/balance_transactions/balance_transaction.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class BalanceTransactions : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , offset : int = 0 , limit : int = 10 , created_at_gte : str = None , created_at_lte : str = None ) -> List [ BalanceTransactionModel ]: \"\"\" Retrieve a list of balance transactions. Args: offset (int, optional): Offsets the returned list by the given number of balance transactions. The returned balance transactions are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of balance transactions returned. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. \"\"\" return self . client . _fetch_list ( path = \"/balance_transactions\" , model_cls = BalanceTransactionModel , list_key = \"transactions\" , params = { \"offset\" : offset , \"limit\" : limit , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte } )","title":"BalanceTransactions"},{"location":"reference/#tremendous.BalanceTransactions.list","text":"Retrieve a list of balance transactions. Parameters: Name Type Description Default offset int Offsets the returned list by the given number of balance transactions. The returned balance transactions are ordered (and offsetted) by their creation date (DESC). 0 limit int Limits the number of balance transactions returned. 10 created_at_gte str Filter by created at greater than or equal to. None created_at_lte str Filter by created at less than or equal to. None Source code in tremendous/balance_transactions/balance_transaction.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def list ( self , offset : int = 0 , limit : int = 10 , created_at_gte : str = None , created_at_lte : str = None ) -> List [ BalanceTransactionModel ]: \"\"\" Retrieve a list of balance transactions. Args: offset (int, optional): Offsets the returned list by the given number of balance transactions. The returned balance transactions are ordered (and offsetted) by their creation date (DESC). limit (int, optional): Limits the number of balance transactions returned. created_at_gte (str, optional): Filter by created at greater than or equal to. created_at_lte (str, optional): Filter by created at less than or equal to. \"\"\" return self . client . _fetch_list ( path = \"/balance_transactions\" , model_cls = BalanceTransactionModel , list_key = \"transactions\" , params = { \"offset\" : offset , \"limit\" : limit , \"created_at[gte]\" : created_at_gte , \"created_at[lte]\" : created_at_lte } )","title":"list"},{"location":"reference/#tremendous.Organizations","text":"Source code in tremendous/organizations/organization.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 class Organizations : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ OrganizationModel ]: \"\"\" Retrieve a list of organizations. Returns: List[OrganizationModel]: A list of organization objects. \"\"\" return self . client . _fetch_list ( path = \"/organizations\" , model_cls = OrganizationModel , list_key = \"organizations\" ) def get ( self , id : str ) -> OrganizationModel : \"\"\" Retrieve an organization by ID. Args: id (str): The ID of the organization to retrieve. Returns: OrganizationModel: The organization object. \"\"\" return self . client . _fetch ( path = f \"/organizations/ { id } \" , model_cls = OrganizationModel , list_key = \"organization\" ) def create ( self , name : str , website : str , with_api_key : bool = False , copy_settings : str = None , phone : str = None ) -> OrganizationModel : \"\"\" Create a new organization. Args: name (str): The name of the organization. website (str): The website URL of the organization. with_api_key (bool, optional): Whether to create an API key for the organization. copy_settings (str, optional): A list of the settings that you wish to copy over to the new organization. See: https://developers.tremendous.com/reference/create-organization phone (str, optional): The phone number of the organization. Returns: OrganizationModel: The created organization object. \"\"\" return self . client . _create ( path = \"/organizations\" , model_cls = OrganizationModel , params = { \"name\" : name , \"website\" : website , \"with_api_key\" : with_api_key , \"copy_settings\" : copy_settings , \"phone\" : phone }, list_key = \"organization\" ) def create_api_key ( self ) -> OrganizationModel : \"\"\" Create an API key for an organization. Args: None \"\"\" return self . client . _create ( path = f \"/organizations/create_api_key\" , model_cls = None , list_key = None )","title":"Organizations"},{"location":"reference/#tremendous.Organizations.create","text":"Create a new organization. Parameters: Name Type Description Default name str The name of the organization. required website str The website URL of the organization. required with_api_key bool Whether to create an API key for the organization. False copy_settings str A list of the settings that you wish to copy over to the new organization. See: https://developers.tremendous.com/reference/create-organization None phone str The phone number of the organization. None Returns: Name Type Description OrganizationModel OrganizationModel The created organization object. Source code in tremendous/organizations/organization.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create ( self , name : str , website : str , with_api_key : bool = False , copy_settings : str = None , phone : str = None ) -> OrganizationModel : \"\"\" Create a new organization. Args: name (str): The name of the organization. website (str): The website URL of the organization. with_api_key (bool, optional): Whether to create an API key for the organization. copy_settings (str, optional): A list of the settings that you wish to copy over to the new organization. See: https://developers.tremendous.com/reference/create-organization phone (str, optional): The phone number of the organization. Returns: OrganizationModel: The created organization object. \"\"\" return self . client . _create ( path = \"/organizations\" , model_cls = OrganizationModel , params = { \"name\" : name , \"website\" : website , \"with_api_key\" : with_api_key , \"copy_settings\" : copy_settings , \"phone\" : phone }, list_key = \"organization\" )","title":"create"},{"location":"reference/#tremendous.Organizations.create_api_key","text":"Create an API key for an organization. Source code in tremendous/organizations/organization.py 69 70 71 72 73 74 75 76 77 78 79 80 def create_api_key ( self ) -> OrganizationModel : \"\"\" Create an API key for an organization. Args: None \"\"\" return self . client . _create ( path = f \"/organizations/create_api_key\" , model_cls = None , list_key = None )","title":"create_api_key"},{"location":"reference/#tremendous.Organizations.get","text":"Retrieve an organization by ID. Parameters: Name Type Description Default id str The ID of the organization to retrieve. required Returns: Name Type Description OrganizationModel OrganizationModel The organization object. Source code in tremendous/organizations/organization.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def get ( self , id : str ) -> OrganizationModel : \"\"\" Retrieve an organization by ID. Args: id (str): The ID of the organization to retrieve. Returns: OrganizationModel: The organization object. \"\"\" return self . client . _fetch ( path = f \"/organizations/ { id } \" , model_cls = OrganizationModel , list_key = \"organization\" )","title":"get"},{"location":"reference/#tremendous.Organizations.list","text":"Retrieve a list of organizations. Returns: Type Description List [ OrganizationModel ] List[OrganizationModel]: A list of organization objects. Source code in tremendous/organizations/organization.py 19 20 21 22 23 24 25 26 27 28 29 30 def list ( self ) -> List [ OrganizationModel ]: \"\"\" Retrieve a list of organizations. Returns: List[OrganizationModel]: A list of organization objects. \"\"\" return self . client . _fetch_list ( path = \"/organizations\" , model_cls = OrganizationModel , list_key = \"organizations\" )","title":"list"},{"location":"reference/#tremendous.Members","text":"Source code in tremendous/members/member.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Members : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ MemberModel ]: \"\"\" Retrieve a list of members. Returns: List[MemberModel]: A list of member objects. \"\"\" return self . client . _fetch_list ( path = \"/members\" , model_cls = MemberModel , list_key = \"members\" ) def get ( self , id : str ) -> MemberModel : \"\"\" Retrieve a member. Args: id (str): The ID of the member. Returns: MemberModel: The member object. \"\"\" return self . client . _fetch ( path = f \"/members/ { id } \" , model_cls = MemberModel , list_key = \"member\" ) def create ( self , email : str , role : str ) -> MemberModel : \"\"\" Create a member. Args: email (str): The email of the member. role (str): The role of the member. Returns: MemberModel: The created member object. \"\"\" return self . client . _create ( path = \"/members\" , model_cls = MemberModel , params = { \"email\" : email , \"role\" : role }, list_key = \"member\" )","title":"Members"},{"location":"reference/#tremendous.Members.create","text":"Create a member. Parameters: Name Type Description Default email str The email of the member. required role str The role of the member. required Returns: Name Type Description MemberModel MemberModel The created member object. Source code in tremendous/members/member.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create ( self , email : str , role : str ) -> MemberModel : \"\"\" Create a member. Args: email (str): The email of the member. role (str): The role of the member. Returns: MemberModel: The created member object. \"\"\" return self . client . _create ( path = \"/members\" , model_cls = MemberModel , params = { \"email\" : email , \"role\" : role }, list_key = \"member\" )","title":"create"},{"location":"reference/#tremendous.Members.get","text":"Retrieve a member. Parameters: Name Type Description Default id str The ID of the member. required Returns: Name Type Description MemberModel MemberModel The member object. Source code in tremendous/members/member.py 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def get ( self , id : str ) -> MemberModel : \"\"\" Retrieve a member. Args: id (str): The ID of the member. Returns: MemberModel: The member object. \"\"\" return self . client . _fetch ( path = f \"/members/ { id } \" , model_cls = MemberModel , list_key = \"member\" )","title":"get"},{"location":"reference/#tremendous.Members.list","text":"Retrieve a list of members. Returns: Type Description List [ MemberModel ] List[MemberModel]: A list of member objects. Source code in tremendous/members/member.py 22 23 24 25 26 27 28 29 30 31 32 33 def list ( self ) -> List [ MemberModel ]: \"\"\" Retrieve a list of members. Returns: List[MemberModel]: A list of member objects. \"\"\" return self . client . _fetch_list ( path = \"/members\" , model_cls = MemberModel , list_key = \"members\" )","title":"list"},{"location":"reference/#tremendous.Roles","text":"Source code in tremendous/roles/role.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Roles : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ RoleModel ]: \"\"\" Retrieve a list of roles. Args: None Returns: List[RoleModel]: A list of role objects. \"\"\" return self . client . _fetch_list ( path = \"/roles\" , model_cls = RoleModel , list_key = \"roles\" )","title":"Roles"},{"location":"reference/#tremendous.Roles.list","text":"Retrieve a list of roles. Args: None Returns: Type Description List [ RoleModel ] List[RoleModel]: A list of role objects. Source code in tremendous/roles/role.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def list ( self ) -> List [ RoleModel ]: \"\"\" Retrieve a list of roles. Args: None Returns: List[RoleModel]: A list of role objects. \"\"\" return self . client . _fetch_list ( path = \"/roles\" , model_cls = RoleModel , list_key = \"roles\" )","title":"list"},{"location":"reference/#tremendous.Fields","text":"Source code in tremendous/fields/field.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Fields : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ FieldModel ]: \"\"\" Retrieve a list of fields. For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. Returns: List[FieldModel]: A list of field objects. \"\"\" return self . client . _fetch_list ( path = \"/fields\" , model_cls = FieldModel , list_key = \"fields\" )","title":"Fields"},{"location":"reference/#tremendous.Fields.list","text":"Retrieve a list of fields. For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. Returns: Type Description List [ FieldModel ] List[FieldModel]: A list of field objects. Source code in tremendous/fields/field.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def list ( self ) -> List [ FieldModel ]: \"\"\" Retrieve a list of fields. For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. Returns: List[FieldModel]: A list of field objects. \"\"\" return self . client . _fetch_list ( path = \"/fields\" , model_cls = FieldModel , list_key = \"fields\" )","title":"list"},{"location":"reference/#tremendous.Webhooks","text":"Source code in tremendous/webhooks/webhook.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class Webhooks : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self ) -> List [ WebhookModel ]: \"\"\" Retrieve a list of webhooks. \"\"\" return self . client . _fetch_list ( path = \"/webhooks\" , model_cls = WebhookModel , list_key = \"webhooks\" ) def get ( self , id : str ) -> WebhookModel : \"\"\" Retrieve a webhook. \"\"\" return self . client . _fetch ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" ) def create ( self , url : str ) -> WebhookModel : \"\"\" Create a webhook. \"\"\" return self . client . _create ( path = \"/webhooks\" , model_cls = WebhookModel , params = { \"url\" : url }, list_key = \"webhook\" ) def delete ( self , id : str ) -> WebhookModel : \"\"\" Delete a webhook. \"\"\" return self . client . _delete ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" ) def test_webhook ( self , id : str , event : str ) -> WebhookModel : \"\"\" Making a request to this endpoint will cause our system to trigger a webhook for the specified event. Tremendous webhooks guide: https://developers.tremendous.com/docs/webhooks-1 Args: id (str): The ID of the webhook. event (str): The event to test the webhook for. Returns: WebhookModel: The webhook object. \"\"\" url = f \" { self . client . base_url } /webhooks/ { id } /simulate\" payload = { \"event\" : event } headers = { \"accept\" : \"text/html\" , \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { self . client . api_key } \" } response = requests . post ( url , headers = headers , json = payload ) return response def list_events ( self , id : str ) -> List [ str ]: \"\"\" List all events that can be used to test a webhook. Args: id (str): The ID of the webhook. Returns: EventModel: A list of events. \"\"\" return self . client . _fetch_list ( path = f \"/webhooks/ { id } /events\" , model_cls = EventModel , list_key = None )","title":"Webhooks"},{"location":"reference/#tremendous.Webhooks.create","text":"Create a webhook. Source code in tremendous/webhooks/webhook.py 40 41 42 43 44 45 46 47 48 49 def create ( self , url : str ) -> WebhookModel : \"\"\" Create a webhook. \"\"\" return self . client . _create ( path = \"/webhooks\" , model_cls = WebhookModel , params = { \"url\" : url }, list_key = \"webhook\" )","title":"create"},{"location":"reference/#tremendous.Webhooks.delete","text":"Delete a webhook. Source code in tremendous/webhooks/webhook.py 51 52 53 54 55 56 57 58 59 def delete ( self , id : str ) -> WebhookModel : \"\"\" Delete a webhook. \"\"\" return self . client . _delete ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" )","title":"delete"},{"location":"reference/#tremendous.Webhooks.get","text":"Retrieve a webhook. Source code in tremendous/webhooks/webhook.py 30 31 32 33 34 35 36 37 38 def get ( self , id : str ) -> WebhookModel : \"\"\" Retrieve a webhook. \"\"\" return self . client . _fetch ( path = f \"/webhooks/ { id } \" , model_cls = WebhookModel , list_key = \"webhook\" )","title":"get"},{"location":"reference/#tremendous.Webhooks.list","text":"Retrieve a list of webhooks. Source code in tremendous/webhooks/webhook.py 20 21 22 23 24 25 26 27 28 def list ( self ) -> List [ WebhookModel ]: \"\"\" Retrieve a list of webhooks. \"\"\" return self . client . _fetch_list ( path = \"/webhooks\" , model_cls = WebhookModel , list_key = \"webhooks\" )","title":"list"},{"location":"reference/#tremendous.Webhooks.list_events","text":"List all events that can be used to test a webhook. Parameters: Name Type Description Default id str The ID of the webhook. required Returns: Name Type Description EventModel List [ str ] A list of events. Source code in tremendous/webhooks/webhook.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def list_events ( self , id : str ) -> List [ str ]: \"\"\" List all events that can be used to test a webhook. Args: id (str): The ID of the webhook. Returns: EventModel: A list of events. \"\"\" return self . client . _fetch_list ( path = f \"/webhooks/ { id } /events\" , model_cls = EventModel , list_key = None )","title":"list_events"},{"location":"reference/#tremendous.Webhooks.test_webhook","text":"Making a request to this endpoint will cause our system to trigger a webhook for the specified event. Tremendous webhooks guide: https://developers.tremendous.com/docs/webhooks-1 Parameters: Name Type Description Default id str The ID of the webhook. required event str The event to test the webhook for. required Returns: Name Type Description WebhookModel WebhookModel The webhook object. Source code in tremendous/webhooks/webhook.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def test_webhook ( self , id : str , event : str ) -> WebhookModel : \"\"\" Making a request to this endpoint will cause our system to trigger a webhook for the specified event. Tremendous webhooks guide: https://developers.tremendous.com/docs/webhooks-1 Args: id (str): The ID of the webhook. event (str): The event to test the webhook for. Returns: WebhookModel: The webhook object. \"\"\" url = f \" { self . client . base_url } /webhooks/ { id } /simulate\" payload = { \"event\" : event } headers = { \"accept\" : \"text/html\" , \"Content-Type\" : \"application/json\" , \"Authorization\" : f \"Bearer { self . client . api_key } \" } response = requests . post ( url , headers = headers , json = payload ) return response","title":"test_webhook"},{"location":"reference/#tremendous.Forex","text":"Source code in tremendous/forex/forex.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Forex : def __init__ ( self , client : \"Tremendous\" ): self . client = client def list ( self , base : str ) -> ForexModel : \"\"\" Retrieve a list of exchange rates Args: base (str): The base currency to get exchange rates for. Returns: ForexModel: A list of exchange rates. \"\"\" return self . client . _fetch_list ( path = \"/forex\" , model_cls = ForexModel , params = { \"base\" : base } )","title":"Forex"},{"location":"reference/#tremendous.Forex.list","text":"Retrieve a list of exchange rates Parameters: Name Type Description Default base str The base currency to get exchange rates for. required Returns: Name Type Description ForexModel ForexModel A list of exchange rates. Source code in tremendous/forex/forex.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def list ( self , base : str ) -> ForexModel : \"\"\" Retrieve a list of exchange rates Args: base (str): The base currency to get exchange rates for. Returns: ForexModel: A list of exchange rates. \"\"\" return self . client . _fetch_list ( path = \"/forex\" , model_cls = ForexModel , params = { \"base\" : base } )","title":"list"},{"location":"response_codes/","text":"From Tremendous API Docs : https://developers.tremendous.com/docs/error-handling HTTP status code Meaning 200 API request successful 201 This HTTP is only returned when an order with a duplicate external_id is submitted. It indicates that the order already exists. 202 API request successful (no new resource created yet, but new resource will be created asynchronously in the background) 400 Validation error of the sent parameters or request body 401 Authorization error e.g. due to an invalid or missing API key 402 Not enough funds in your account 404 No resource could be found for the provided ID 422 Request lacks one of the required parameters 429 Rate limit exceeded 500 Unexpected error. If this persists, please contact developers@tremendous.com 502 Temporary gateway error\u2014service unreachable. Retry, and let us know if it continues.","title":"Response Codes"}]}